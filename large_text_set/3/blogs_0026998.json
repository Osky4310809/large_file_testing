{"organizations": [], "uuid": "7524b5aae29c2aef5b45e33f3b5c6d3e81442ce8", "thread": {"social": {"gplus": {"shares": 4}, "pinterest": {"shares": 2}, "vk": {"shares": 0}, "linkedin": {"shares": 1}, "facebook": {"likes": 128, "shares": 128, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "www.creativebloq.com", "main_image": "", "site_section": "http://fse.futurelicensing.com/feed/fetch/token/9515d3343dd5ff1bc10919f58067886c/", "section_title": "Creative Bloq", "url": "http://www.creativebloq.com/web-design/get-more-atom-text-editor-21619396", "country": "GB", "domain_rank": 3144, "title": "Get more from the Atom text editor", "performance_score": 1, "site": "creativebloq.com", "participants_count": 1, "title_full": "Get more from the Atom text editor", "spam_score": 0.0, "site_type": "blogs", "published": "2017-03-27T19:00:00.000+03:00", "replies_count": 0, "uuid": "7524b5aae29c2aef5b45e33f3b5c6d3e81442ce8"}, "author": "Jessica Lord", "url": "http://www.creativebloq.com/web-design/get-more-atom-text-editor-21619396", "ord_in_thread": 0, "title": "Get more from the Atom text editor", "locations": [], "entities": {"persons": [{"name": "github", "sentiment": "none"}], "locations": [], "organizations": [{"name": "atom development", "sentiment": "none"}, {"name": "css", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "Of all the text editors available, Atom is a favourite amongst designers and devs. Atom is developed by GitHub and was open sourced in early 2014. Since then, it has grown to more than 500,000 monthly users. Out of the box Atom is Git-aware, includes Markdown previews, auto-complete and more. It is designed to be hackable to the core.\nIn addition to being open source, Atom is built using web technology: JavaScript, HTML and CSS. This makes Atom&apos;s core and extensibility options accessible to a wide range of developers.\nIn this article I&apos;ll share ways in which you can extend and customise Atom, from managing packages to adding custom behaviours.\n\nAtom is built with JavaScript, HTML and CSS Package ecosystem At the time of writing, nearly 6,000 packages and over 2,000 themes had been published for Atom. Atom itself is created by bundling the core app with dozens of packages for each default feature.\nThese packages do things like add Markdown preview support, display your directory&apos;s Git status, and control Find and Replace. They can be managed through the Settings view. Atom&apos;s Settings view sets it apart because it includes a package manager by default, giving you access to the packages you have installed, as well as the thousands created by the community. You can browse and install these from within Atom.\nYou can open the Settings view by clicking &apos;Packages > Settings View > Open&apos; in your menu bar or by using the cmd+, keyboard shortcut.\nPackages \nUse packages to extend and customise Atom With the Settings view open, you'll find the Packages tab on the left. This will display all the packages you have installed, and their type:\nCommunity packages: Packages written by people outside of GitHub&apos;s Atom team Core packages: Developed by the Atom team and bundled with Atom Development packages: Packages you have on your machine and use in Atom from local source From the Packages view, you can manage your installed packages by selecting to install/uninstall or disable/enable them. Clicking on a package in this view takes you to the package&apos;s available settings (if any) as well as the README that describes the package. If you want to know more you can click on the link and be taken to the package&apos;s repository or issue tracker.\nInstall The Install tab in the Settings view connects you to the thousands of packages available for Atom. At the top you&apos;ll find featured packages, but you can also use the search bar to find the one you&apos;re looking for.\nPackages are published to Atom using Atom Package Manager (APM), which is included with Atom. You&apos;ll find published Atom packages in the Install view, and they can also be found on Atom&apos;s website .\nJust like in the Packages view, clicking on a single package displays the README, so you can see what it does before you install it. It also links to the package&apos;s code repository.\nYou can install new packages from the community in this view by clicking the Install button on a listed package. You can then manage packages from the Packages view.\nDevelopment packages In order to use a package you're developing locally in Atom before you publish it with APM, you can link it to Atom using the APM CLI. For instance, from within the package's directory in Terminal or Bash, use the following command:\nLinked packages will show up in the Development Packages section in the Packages view. You can see linked packages with this command:\nThemes In the Install view, toggle the search bar to Themes to search the available Atom themes. Once you have themes installed, you can manage and set them as the current theme in the Themes view.\nUI and syntax themes Atom has themes for both the UI and the code syntax. The syntax themes style how the code looks in the editor itself, and the UI themes style how the rest of Atom looks (e.g. the tabs and file tree).You can even make small changes to Atom without creating a complete theme or package.\nAlternative customisation The Settings tab in the Settings view provides your options for customising Atom, but you can go beyond the default options by adding JavaScript or CSS within your config. Every instance of Atom has a .atom directory that contains its configuration settings, where you can create custom behaviour or styles. \nTo open your .atom configuration directory, click the â€˜Open config folder&apos; button on the left side of the Settings view.\nInit.coffee The init.coffee file allows you to add custom behaviour to Atom every time a new window is launched. It&apos;s executed after packages are loaded and any previous editor state has been restored.\nYou can use CoffeeScript in this default file or create a new file, init.js, to use JavaScript. In init you can make use of the full Node.js API. For example, if each time you opened a window you wanted Atom to greet you with the version of Node.js it is using, you could add this to your init file:\nTo interact more with Atom, you can use the Atom API. Documentation on the API is available on the Atom site.\nStyles.css Just like the init.coffee file, styles.css is a file that is loaded after Atom starts up. The styles you add here will override or add onto Atom&apos;s existing styles, and they will take effect immediately upon saving. \nFor example, you could change the editor&apos;s background colour by adding this CSS:\nA quick way to find the property names in Atom is to make use of the fact that underneath Atom is Chromium, so you have access to DevTools. You can toggle DevTools on and off by pressing alt+cmd+I .\nWith DevTools open you can use the magnifying glass to select elements in Atom and reveal their class or element names. Target them in your styles.css file to change their properties.\nWith Atom&apos;s package manager and configuration files you can customise your Atom environment right from within Atom. This introduction should get you well on your way, and if you have any questions, open an issue on the project .\nThis article originally appeared in issue 277 of net magazine . \nRelated articles: \nMaster digital marketing with these newsletter templates We reveal the best web fonts for your site Discover the best user testing software ", "external_links": [], "published": "2017-03-27T19:00:00.000+03:00", "crawled": "2017-03-27T14:19:02.778+03:00", "highlightTitle": ""}