{"organizations": [], "uuid": "e4edac68e9b1e2acabea2098fb49f13f81888aab", "thread": {"social": {"gplus": {"shares": 1}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 22}, "facebook": {"likes": 130, "shares": 130, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "blog.docker.com", "main_image": "https://blog.docker.com/wp-content/uploads/a6f0ac06-8a88-4277-bf5c-76fe01f9c27e-e1490217770335.jpg", "site_section": "http://blog.docker.com/feed/", "section_title": "Docker Blog", "url": "https://blog.docker.com/2017/03/meet-winners-holberton-school-docker-hackathon/", "country": "US", "domain_rank": 5312, "title": "Meet the winners of the Holberton School and Docker hackathon", "performance_score": 1, "site": "docker.com", "participants_count": 1, "title_full": "Meet the winners of the Holberton School and Docker hackathon", "spam_score": 0.0, "site_type": "blogs", "published": "2017-03-23T00:00:00.000+02:00", "replies_count": 0, "uuid": "e4edac68e9b1e2acabea2098fb49f13f81888aab"}, "author": "Lisa McNicol", "url": "https://blog.docker.com/2017/03/meet-winners-holberton-school-docker-hackathon/", "ord_in_thread": 0, "title": "Meet the winners of the Holberton School and Docker hackathon", "locations": [], "entities": {"persons": [{"name": "holden grissett", "sentiment": "none"}, {"name": "mirai", "sentiment": "none"}, {"name": "tim britton", "sentiment": "none"}, {"name": "ngrok", "sentiment": "none"}, {"name": "hajime", "sentiment": "none"}], "locations": [], "organizations": [{"name": "holberton school", "sentiment": "negative"}]}, "highlightText": "", "language": "english", "persons": [], "text": "Call Me Moby works in the following ways: 1. Your docker command text is received by our web server as a HTTP POST request 2. Twilio API interprets this request and reads your message as text 3. This text is later parsed and then interacts with the Docker Engine API to perform your operation. 4. We then send back our response to the web server, often times including a text message reply with necessary return statements 5. Finally our message will be sent and received by our phone. How Can You Use it? Grab the Call Me Moby image from Docker Hub . In their own words: \nOur app.py file contains the brute of the application, handling incoming HTTP requests, maintaining our web server, and utilizing both the Docker Engine and Twilio API. Try running the python3 app.py and go open your local host on your favorite web browser! Unfortunately, the current app is only running in the local environment and in order for our server to receive the HTTP request, we has to use the ngrok tunneling service. Ngrok provides a localhost tunnel such that outside services can get access to our local development environment. After installation, run Ngrok locally using ./ngrok http 5000, to create your forwarding address. You can also copy and paste your forwarding address into your web browser and see that now any machine can have access to our local environment. Assuming you have a Twilio Account and phone number, just copy and paste your forwarding address to your Twilio phone number management console. From there, run your app.py and start texting and managing! And the winner is … (drum roll please)… HMS (Honeypot Management System) by Holden Grissett by Tim Britton In their own words: HMS (Honeypot Management System, also a great naval pun) is a honeypot server custom-tailored to make use of the modularity of containers for extensibility and security. We adapted the honeypot server for use in swarm mode to demonstrate the use of container-based honeypots at scale in swarm mode. This system allows us to easily scale up data collection for security research. HMS currently includes a server to mimic an insecure telnet service, made for the hackathon. Upon connection to the server, a container is spun up for each client. The client’s input is parsed and can either be sent directly to the container and the response sent directly to the client (to give the illusion that they’re directly inside the container), or commands can have pre-scripted responses, or blocked entirely for security. It’s currently set-up to mimic a Busybox installation, but with minor tweaking could easily emulate any image on Docker Store ! At current it easily passes tests made by Mirai and Hajime botnets. When these bots seemingly successfully download their malware and exit the server, the container is checked for differences and any downloaded or created files are tar’d and saved for logging purposes. Going forward, we are extending our functionality to make deploying honeypot images in swarm mode faster and easier. We would also like to extend functionality to existing honeypots and create more of our own container-based honeypots. Check out their project on GitHub: HMS (Honeypot Management System) Get involved with the Docker Community:", "external_links": [], "published": "2017-03-23T00:00:00.000+02:00", "crawled": "2017-03-23T08:22:47.912+02:00", "highlightTitle": ""}