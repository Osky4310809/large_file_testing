{"organizations": [], "uuid": "dc29afe6b7abd42ee901625d4c8768870db81cad", "thread": {"social": {"gplus": {"shares": 3}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 0}, "facebook": {"likes": 205, "shares": 205, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "www.c-sharpcorner.com", "main_image": "http://www.c-sharpcorner.com/Images/csharp-corner.png", "site_section": "http://www.asp.net/rss/dailyarticles", "section_title": "ASP.NET Articles of the Day", "url": "http://www.c-sharpcorner.com/article/working-with-a-distributed-cache-in-asp-net-core/", "country": "US", "domain_rank": 5225, "title": "Working With A Distributed Cache In ASP.NET Core", "performance_score": 2, "site": "c-sharpcorner.com", "participants_count": 0, "title_full": "Working With A Distributed Cache In ASP.NET Core", "spam_score": 0.0, "site_type": "blogs", "published": "2017-01-26T19:22:00.000+02:00", "replies_count": 0, "uuid": "dc29afe6b7abd42ee901625d4c8768870db81cad"}, "author": "", "url": "http://www.c-sharpcorner.com/article/working-with-a-distributed-cache-in-asp-net-core/", "ord_in_thread": 0, "title": "Working With A Distributed Cache In ASP.NET Core", "locations": [], "entities": {"persons": [{"name": "jignesh trivedi", "sentiment": "negative"}], "locations": [], "organizations": [{"name": "mvc", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "Working With A Distributed Cache In ASP.NET Core By Jignesh Trivedi on Jan 02 2017 In this article, you will learn how to work with a distributed cache in ASP.NET Core. AspnetCoreApplication1.zip \nIntroduction In general terms, caching takes place where the frequently-used data is stored, so that the application can quickly access the data rather than accessing the data from the source. Caching can improve the performance and scalability of the application dramatically and can help us to remove the unnecessary requests from the external data sources for the data that changes infrequently. ASP.NET Core has a rich support for caching and it supports different kinds of caching. In my past article, I explained about the In-memory caching . In this article, we will talk about distributed cache. It can help us to improve the performance and scalability of the application, when the application is hosted on the web farm or cloud environment. In distributed caching, cache is not stored in to an individual web serverâ€™s memory. Cache data is centrally managed and the same data is available to all the app servers. The distributed caching has several advantages, as shown below. The cache is stored centrally, so all the users get the same data and data is not dependent on which web server handles its request. The cache data is not impacted if any problem happens with the web server; i.e., restart, new server is added, a server is removed. \nThe distributed cache can be configured with either Redis or SQL Server. The implementation of the caching is not dependent on the configuration; the application interacts with the cache, using IDistributedCache interface. IDistributedCache Interface This interface has methods, which allow us to add, remove, and retrieve the distributed cache. This interface contains synchronous and asynchronous methods. Get, GetAsync It retrieves the data from the cache, using key. It returns byte[], if the key is not found in to cache. Set, SetAsync It adds the item to cache as byte[]. Refresh, RefreshAsync It refreshes the item in the cache and also resets its sliding expiration timeout, if any. Remove, RemoveAsync It removes the entry from the cache, using key. \nWe need to perform the three simple steps given below to configure distributed cache in ASP.NET Core. Define cache dependencies into project.json file. Configure cache Service ConfigureServices method of Startup class. Dependency is automatically injected to the application's middleware or MVC controller constructor. Using this instance of cache dependency object, we can perform the operation related to distributed cache \nDistributed Cache with SQL Server SqlServerCache allows the distributed cache to use SQL Server as cache storing purpose. Prior to using SQL Server as a cache, we must create a table with the schema given below. CREATETABLE[dbo].[SQLCache]( [Id][nvarchar](449) NOTNULL, [Value][varbinary]( max ) NOTNULL, [ExpiresAtTime][datetimeoffset](7) NOTNULL, [SlidingExpirationInSeconds][ bigint ] NULL , [AbsoluteExpiration][datetimeoffset](7) NULL , CONSTRAINT [pk_Id] PRIMARYKEYCLUSTERED([Id] ASC ) WITH (PAD_INDEX = OFF , STATISTICS_NORECOMPUTE = OFF , IGNORE_DUP_KEY = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON ) ON [ PRIMARY ]) ON [ PRIMARY ] TEXTIMAGE_ON[ PRIMARY ] The next step is to add dependencies into the project.json file. To use SQL server as cache, we need to", "external_links": [], "published": "2017-01-26T19:22:00.000+02:00", "crawled": "2017-01-28T01:05:24.747+02:00", "highlightTitle": ""}