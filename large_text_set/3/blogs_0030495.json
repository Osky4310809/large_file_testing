{"organizations": [], "uuid": "9644e58a8202463110e5e704fef3289eacf7ba41", "thread": {"social": {"gplus": {"shares": 1}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 3}, "facebook": {"likes": 191, "shares": 191, "comments": 2}, "stumbledupon": {"shares": 0}}, "site_full": "www.c-sharpcorner.com", "main_image": "http://www.c-sharpcorner.com/Images/csharp-corner.png", "site_section": "http://www.asp.net/rss/dailyarticles", "section_title": "ASP.NET Articles of the Day", "url": "http://www.c-sharpcorner.com/article/asp-net-core-web-api-with-dapper-and-vs-2017/", "country": "US", "domain_rank": 5225, "title": "ASP.NET Core Web API With Dapper And VS 2017", "performance_score": 1, "site": "c-sharpcorner.com", "participants_count": 0, "title_full": "ASP.NET Core Web API With Dapper And VS 2017", "spam_score": 0.0, "site_type": "blogs", "published": "2017-03-30T07:50:00.000+03:00", "replies_count": 0, "uuid": "9644e58a8202463110e5e704fef3289eacf7ba41"}, "author": "", "url": "http://www.c-sharpcorner.com/article/asp-net-core-web-api-with-dapper-and-vs-2017/", "ord_in_thread": 0, "title": "ASP.NET Core Web API With Dapper And VS 2017", "locations": [], "entities": {"persons": [{"name": "dapper", "sentiment": "none"}], "locations": [], "organizations": [{"name": "visual studio", "sentiment": "none"}, {"name": "dll", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "DataMgtCoreAPIMasterBanketeshvarNarayan.zip \nI will create an ASP.NET Core Web API from scratch, using Visual Studio 2017 ,and you can follow along or skip some steps, if you are already aware of how to create ASP.NET Core Web API. I will start from a very basic concept and then go to the advanced concepts. In this project, I will be using 3 layers: API Layer, Business Layer, and Repository Layer, and some separate projects for the entities, then I will use Dapper at the Repository Layer as Micro ORM. I will show you how to add assembly (*.DLL) references in .NET Core API and how to add .NET Core Class Library (.NET Standard). I will also discuss about skipping Business Layer and directly calling Repository Layer class from Web API Layer and using Generic Repository interface. I am going to use Visual Studio 2017 RC and IDE, but you can also use Visual Studio 2015 as IDE. If you didn’t have the template for ASP.NET Core, you need to install this template. Step 1 Create ASP.NET Core Web API Project Open “Visual Studio 2017” -> go to “File” menu -> New -> Project Or Press “Ctrl + Shift + N” after opening Visual Studio Application Select project template. Select the project template, as displayed in the preceding screenshot and click OK to continue. Here, I am selecting ASP.NET Core Web Application with .NET Core Framework because I would like to create a project, which can run on multiple operating systems including Windows, Mac and Linux. Select a template from ASP.NET Core templates. \nPlease select the “Web API” template from ASP.NET Core templates list. Right now, I would like to focus only on Web API and Dapper, so I would recommend that you do not select any authentication and also enable Docker Support. In the next article, I will explain how can we enable Docker support and Authentication mechanism. Preceding is the screenshot for the same. After selecting “Web API” template from ASP.NET Core templates list, click OK to continue. Visual Studio will create a sample Web API Service for you. As you can see in the preceding screenshot it has added a default controller. “ValuesController.cs”. You can delete this file later on because I am not going to use this default controller but right now, this file is useful for us and we can at least test whether our web application is running or not. Step 2 Checking if Web API service is running fine. Just press F5 or Ctrl+F5 and you will find that it will open a Web API URL in a new Browser Window. As you can see in the preceding screenshot, it has taken a URL and also displayed some values in the browser. If you look closely at the Visual Studio Run button, then you will find that there is one more option available apart from IIS hosting and it is self-hosting. Following is the screenshot for the same for your reference. You may have noticed that the base class (parent controller) for “ValuesController” is different than the earlier versions of Web API. Because in ASP.NET Core Framework, ASP.NET MVC & ASP.NET Web API has been merged and both have the parent controller as Controller (Microsoft.AspNetCore.Mvc.Controller). Step 3 Add Business logic project for Web API. Right click on Solution Explorer -> Add -> New Project. Expand the installed template and select .NET Core and inside it, select Class Library (.NET Standard)..NET standard library is a formal specification of .NET APIs, which are intended to be available on all .NET runtimes. The motivation behind the standard library is establishing greater uniformity in the .NET ecosystem. You can read more about .NET standard library here . Give the project name “DataManagement.Business” and press OK to continue. Afterwards, Visual Studio will add a new project of type “.NET Standard Library”. Step 4 Add Business Layer project for the interfaces. Repeat the same step mentioned in step 3 and add a project with the name “DataManagement.Business.Interfaces” of type “.NET Standard Library”. Step 5 Add Repository Layer project for interfaces. Repeat the same step mentioned in step 3 and add a project with the name “DataManagement.Repository.Interfaces” of type “.NET Standard Library”. Step 6 Add Repository Layer project for classes. Repeat the same step mentioned in step 3 and add a project with the name “DataManagement.Repository” of type “.NET Standard Library”. Step 7 Add a project for Entities Repeat the same step mentioned in step 3 and add a project with the name “DataManagement.Entities” of type “.NET Standard Library”. After adding all the projects mentioned above, your Solution Explorer will look as shown below in the screenshot. Step 8 Create database, table & stored procedure for CRUD operation SQL Script", "external_links": [], "published": "2017-03-30T07:50:00.000+03:00", "crawled": "2017-03-29T10:43:53.389+03:00", "highlightTitle": ""}