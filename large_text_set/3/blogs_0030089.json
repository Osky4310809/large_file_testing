{"organizations": [], "uuid": "2ad221e55538e09edf525c0cfecda22e1eb0a237", "thread": {"social": {"gplus": {"shares": 0}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 0}, "facebook": {"likes": 735, "shares": 735, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "www.pcgamer.com", "main_image": "http://cdn.mos.cms.futurecdn.net/tykXPTvzhKhXEqzWseQCk7-1200-80.jpg", "site_section": "http://www.pcgamer.com/rss", "section_title": "PC Gamer", "url": "http://www.pcgamer.com/the-ethics-of-emulation-how-creators-the-community-and-the-law-view-console-emulators/", "country": "GB", "domain_rank": 2091, "title": "The ethics of emulation: how creators, the community, and the law view console emulators", "performance_score": 7, "site": "pcgamer.com", "participants_count": 0, "title_full": "The ethics of emulation: how creators, the community, and the law view console emulators", "spam_score": 0.0, "site_type": "blogs", "published": "2017-03-29T04:24:00.000+03:00", "replies_count": 0, "uuid": "2ad221e55538e09edf525c0cfecda22e1eb0a237"}, "author": "", "url": "http://www.pcgamer.com/the-ethics-of-emulation-how-creators-the-community-and-the-law-view-console-emulators/", "ord_in_thread": 0, "title": "The ethics of emulation: how creators, the community, and the law view console emulators", "locations": [], "entities": {"persons": [{"name": "chrono", "sentiment": "none"}, {"name": "lorbiecki", "sentiment": "none"}, {"name": "zelda", "sentiment": "none"}, {"name": "frank cifaldi", "sentiment": "none"}, {"name": "cifaldi", "sentiment": "none"}, {"name": "mark lorbiecki", "sentiment": "none"}, {"name": "bourdon", "sentiment": "none"}, {"name": "byuu", "sentiment": "none"}, {"name": "pierre bourdon", "sentiment": "none"}, {"name": "dolphin", "sentiment": "none"}, {"name": "cemu", "sentiment": "none"}, {"name": "lowe graham jones", "sentiment": "none"}], "locations": [{"name": "us", "sentiment": "none"}, {"name": "bleem", "sentiment": "none"}, {"name": "cemu", "sentiment": "none"}], "organizations": [{"name": "united states court of appeals for the second circuit", "sentiment": "none"}, {"name": "ninth circuit", "sentiment": "none"}, {"name": "united states court of appeals", "sentiment": "none"}, {"name": "sony", "sentiment": "none"}, {"name": "connectix", "sentiment": "none"}, {"name": "google", "sentiment": "none"}, {"name": "nintendo", "sentiment": "none"}, {"name": "supreme court", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "statistics gathering dialogue that users encounter when they first run the emulator, asking to collect anonymous data. Obviously some users will decline, but Bourdon told me their numbers indicate around 50,000 daily users. For comparison, Nintendo sold around 20 million GameCubes and 100 million Wiis. If half of Dolphin's users opted in, that's still less than one percent of the console audience. \nCifaldi and Bourdon both argued that the games industry's villainization of emulation is why it's so closely linked to piracy. \"Had we as an industry embraced it instead of fighting it, we could have sold it to consumers as the wonderful tool that it is as opposed to having to defend ourselves when we use it to republish old games,\" Cifaldi said. Bourdon made a more technical argument: when new console hardware arrives, emulation is not the initial tool that enables piracy. It always follows piracy. \nHad we as an industry embraced emulation instead of fighting it, we could have sold it to consumers as the wonderful tool that it is. Frank Cifaldi \n\"Having open access to a console is pretty much a requirement to make good progress on emulating the system. Without it, you can't do any advanced reverse engineering and figure out how the intricacies of the system behave. And, as it turns out, having open access to a console tends to lead to piracy extremely quickly (and it becomes easier and easier over time, with e.g. custom firmwares replacing modchips). \n\"Piracy on the Wii U has been doable for close to 1.5 years already. At that time Cemu was just getting started and hadn't released their 1.0.0 version yet. If you own the hardware, it's so much easier to pirate a game than to play it on an emulator. Less technical fiddling, more stability, etc. That's doubly true on extremely new emulator projects. Nobody serious would recommend doing your first playthrough of BotW through Cemu at this time, you'd be spoiling your experience.\" \nDespite their staunch support for emulation as a whole, the developers I talked to had some serious ethical qualms about Cemu's closed source development. Cemu's sudden explosion of popularity creates a possibility, though a small one, that the rest of the emulation scene could be at risk. The Legend of Zelda: Skyward Sword, running in Wii emulator Dolphin. Why Wii U emulator Cemu is controversial \nDuring the life of the Wii, Dolphin was an active, high profile emulator that could often run new games with minor performance issues. The last major Zelda game, Skyward Sword, was in better shape on Dolphin weeks after launch than Breath of the Wild currently is on Cemu. Nintendo never threatened a lawsuit then, so why would they now? \nMaybe they won't (a Nintendo representative did not respond to a request for comment for this story). But there are differences that make it more likely: money and openness. While some in the industry wring their hands over piracy, these are the ethical issues the emulation community grapples with internally. Bourdon told me that the Dolphin dev team prides itself on not taking donations, because as soon as money is involved, there could be pressure to solve a certain user's bug submissions first, or tackle a game a big donor really wants to see emulated. More importantly, though, Dolphin is open source, and entirely the product of \"clean room reverse-engineering,\" which means none of Dolphin's code is based on technical information covered by Nintendo non-disclosure agreements. \nBeing an open source project may have saved Dolphin from legal threats in the Wii years. Anyone, including Nintendo, can see the entirely of Dolphin's source code laid bare, making it much easier to spot proprietary code or suspicious improvements illegally gleaned from private company material, rather than legally reverse-engineered. \n\"You can save a lot of time if you ‘cheat’ and look at proprietary documentation (console SDKs, leaks, etc.) while trying to understand how a console works,\" Bourdon explained. \"This is in general frowned upon in many emulation projects: it puts the whole project at the risk of a lawsuit. It's one of the things where we have no doubts about the legality: it's clearly illegal. With open source projects the development process is usually very open. If I were to take Dolphin as an example, we talk about everything in public, we do code reviews in public, etc. That doesn't guarantee that our contributors don't look at this documentation in secret, but it makes it harder to do so. And we have a clear stance against it: I've personally banned multiple people from interacting with us because they made it clear when talking with us that they based their work on illegally obtained documentation.\" \nThis is what makes Cemu controversial, even in the emulation community. We don't know what the source code looks like, or what kind of information the developers have used to reverse-engineer the Wii U. And the developers aren't talking (a Cemu dev declined an interview for this story). \n\"For a closed source project, the only thing that can be seen from the outside is the end result,\" Bourdon said. \"The process is completely opaque. And this leads to a lot of concern about whether these projects end up taking shortcuts by looking at proprietary documentation. After all, who is going to notice? This puts the project at risk: if they were to get sued, the lack of diligence in the process would almost certainly be found through discovery (which would expose their source code, communication logs, etc.). But also it is bad for the ecosystem because closed source alternatives could end up having an advantage on the open source alternatives. Users tend to not care about long term problems like 'is this emulator going to still work 5 years from now.'\" \nIt's bad for the ecosystem because closed source alternatives could end up having an advantage on the open source alternatives. Dolphin developer Pierre Bourdon \nexplained why the project was closed source , claiming it makes it easier to progress quickly, and keeps the direction of the project under his control. Part of the explanation sounds noble: \"online features are of low priority to avoid people using the emulator to cheat in online-play and ruin the experience for everyone.\" But other parts speak to the exact issue other emulation developers take with closed source development: \"being slightly reluctant to share the code with people who have no respect for the effort and time it took to get this far.\" \nThat argument doesn't hold up when you consider who will be most interested in that code: other emulation developers. \nSharing knowledge is important in the emulation community, Bourdon said. Dolphin has shared code with other emulators, and he says he looks at the code of other open source projects for inspiration. \"Many people contribute to multiple emulators and spread the good practices around. If you look closely, you'll find that many emulators share the same internal architecture. It's easy to say 'well, that's because it's the obvious architecture to use'—I'd argue it's only obvious because people standardized on it in the first place… Having closed source projects in that space breaks the symmetry of information sharing. \nSuddenly, you have people that get all the benefits from what is shared by other projects, but don't give back to the community.\" Chrono wasn't on trial for emulation, but you get the point. \nByuu, whose emulator development is all open source, had harsher words. \"Very few emulators are entirely independent works,\" he wrote. \"Cemu may or may not enjoy that distinction, but most emulators do not. Most emulators are built on the work of dozens of people before them reverse-engineering hardware, writing documentation, and releasing source code. I find it incredibly selfish to benefit from all of the work done before, and yet not share in return. It reminds me of someone who would see a 'take a penny, leave a penny' tray, and decide to empty the entire tray into their pocket, just because they could.\" \nThe potential negatives of closed source development aren't entirely theoretical, either. Byuu wrote that Sega Saturn emulation \"suffered for a decade\" due to a cycle of closed source development, and Bourdon noted that many emulation projects that claim they'll go open source when abandoned or completed never make that transition, making it impossible for others to continue the work. This 2015 Dolphin post covers just how difficult it can be to sort out open source licenses. \nIt's possible, of course, for a closed source emulator to achieve the same goal of preservation that emulator authors like Byuu strive for. It's just far less likely, and ultimately riskier for the emulation community. Likewise, closed source development can be completely above board, but right now only Cemu's developers know how clean their code is. \nSo let's say Nintendo decides Cemu is too big a threat to their profits to ignore and files a lawsuit. What happens then? In online discussions, the common wisdom is that emulators fall into a \"legal gray area,\" but I wanted a more nuanced understanding of the law than that, so I asked lawyer Mark Lorbiecki to help me understand where emulators stand in the shaky world of copyright law. Are emulators really legal? \nAround the turn of the century, Sony tried to sue the makers of two emulators, Bleem! and Virtual Game Station, which were both sold as retail products. Sony lost both cases. In the first case, Sony v. Connectix, a district court initially found that Virtual Game Station tarnished Sony's brand and violated its copyright. A circuit court reversed those rulings and kicked the case back down to the district court, which dismissed most of Sony's charges, including violation of trade secrets and unfair competition. \nThese cases form the basis of how we understand the legality of emulation today: as long as an emulator does not reuse code and is the product of reverse-engineering, we assume it falls under fair use, which protects the unlicensed use of copyrighted work in very specific circumstances . Emulators like the PS2 emulator PCSX2 don't include the BIOS files needed to run games, because that's protected by Sony's copyright; you have to dump the files from your own console or download them (illegally) online. But the back-and-forth between the district court and the circuit court shows where the whole \"legal gray area\" claim is actually pretty true. The law isn't as cut and dry as you might expect. \nAs Mark Lorbiecki of Lowe Graham Jones explained to me over email, it's really important to understand the difference between copyright and patent law, and what applies here. As he wrote: \"Software is copyrighted. Copyright protection extends only to the expression of an idea—not to the underlying idea itself. That is the difference between patents and copyrights. This distinction—commonly referred to as the 'idea/expression dichotomy'—is codified in § 102(b) of the Copyright Act, 17 U.S.C.S. § 102(b), which provides that in no case does copyright protection for an original work of authorship extend to any idea, procedure, process, system, method of operation, concept, principle, or discovery, regardless of the form in which it is described, explained, illustrated, or embodied in such work.\" \nSo if an emulator author can reverse-engineer the process or concept of the original code without using that code, they're likely in the clear. But courts have different outlooks on copyrighting computer code, and the Supreme Court has never given a ruling on these issues for lower courts to follow. \n\"Circuit courts have struggled with, and disagree over, the tests to be employed when attempting to draw the line between what is protectable expression and what is not,\" Lorbiecki wrote. \"When assessing whether the non-literal elements of a computer program constitute protectable expression, the United States Court of Appeals for the Ninth Circuit has endorsed an ' abstraction-filtration-comparison ' test formulated by the United States Court of Appeals for the Second Circuit and expressly adopted by several other circuits. This test rejects the notion that anything that performs a function is necessarily uncopyrightable.\" \nSo, in other words, a court could rule that code counts as original expression, and original expression is protected by copyright. That's exactly what happened in the 2014 ruling in Oracle v. Google. Google closely mimicked 37 Java APIs in Android, and the court ruled those APIs were entitled to copyright protection. But the key difference is that the Oracle v. Google case was about the copyrightability of code rather than the fair use of that code. Google didn't reverse-engineer the Java APIs, but rather mimicked their structure. \nWhen the court ruled those APIs were actually protected by copyright, Google had no choice but to argue fair use, which wasn't a great fit for a case about APIs as Motherboard explained . But it worked: in 2016, a jury found that Google's reimplementation of the API code constituted fair use, which meant Oracle's copyright couldn't be enforced. If the verdict had gone the other way, it would've had huge repercussions for the technology industry, as reimplementing APIs is a common practice. \nAn emulator hasn't faced a court case that dives this deep into the \"original expression\" analysis of a game console's code, but the protection of fair use was applied in Sony v. Connectix. Connectix didn't mimic the original code: they reverse-engineered the code to see how it functioned, which in legalese is called \"intermediate copying,\" then wrote their own code to accomplish the same functions. This 2001 analysis of the case does a good job of explaining the reasoning and impact of a fair use decision: \nCircuit courts have struggled with, and disagree over, the tests to be employed when attempting to draw the line between what is protectable expression and what is not. Mark Lorbiecki \n\"The Ninth Circuit's analysis supports the efforts of software developers who use intermediate copying and reverse engineering so long as their efforts meet certain minimum standards. First, the copying must be 'necessary' in order to be secure in the shelter of the fair use defense. This point was set out expressly in the Sega decision. Second, the end product must not contain any of the original work's protected elements. Where the end product contains protected expression a developer has moved from the safety of the intermediate copying category into 'direct' copying. This will likely result in the fair use factors shifting towards a finding of infringement.The work must also be transformative. The Connectix decision makes it clear that the transformative quality is critical to the analysis of statutory factors one and four. Transformativeness is especially important given the commercial nature of the products involved in these cases because it can be used to offset the commercial harm that results from the copying. The fair use defense will most likely fail where the product is found to be non-transformative. For example, a company that develops a clone of a competitor's product via reverse engineering will likely be determined to be infringing even where the copyrighted software was only used in an intermediate fashion.\" \nAs long as a finalized emulator doesn't include the original code, then, it would likely be considered fair use, as Connectix's Virtual Game Station was. Nintendo could easily look at an open source emulator like Dolphin and verify that it's not using the original code without ever launching a court case. But what about with a closed source emulator? That could require a lawsuit, and it's tough to know in advance whether fair use would apply. \nIf a closed source emulator like Cemu were actually created by studying Nintendo's Wii U documentation or source code, that would likely not be considered fair use. If \"Cemu used actual code (if Nintendo can prove the use of Nintendo code), their emulator is illegal,\" Lorbiecki explained. \"If Cemu were to argue that they saw the Nintendo code, studied it, and then changed it by writing different code that performed the same tasks, that would be derivation and carries the same penalty as copying. If Cemu simply derived the code by examining how the code functions without seeing the actual code and writing their own code to perform those same functions, that is probably legal.\" \nCemu's Patreon may matter from an ethical standpoint, then, but it doesn't make the emulator any more or less illegal; even if you argued early access to builds counted as \"selling\" the emulator, sale isn't necessary for Nintendo to go after a copyright claim. After all, Sony lost to Connectix, which was selling its emulator in stores: according to the above analysis, \"the court acknowledged the potential for decreased sales of the Play Station but found that it was outweighed by the transformative nature of the Connectix product.\" The only likely effect of the Patreon is drawing attention. \nEven if we knew the provenance of Cemu's code, we couldn't say for sure how a legal case would play out. Our understanding of copyright law in the US is still evolving, as the back-and-forth in the Oracle v. Google case shows. Oracle appealed the decision mentioned above, and a new ruling on fair use could have an impact on a future emulator case. Sony v. Connectix's interpretation of fair use seems like a strong protection for reverse-engineering console code, but it may not be forever. \nUltimately, that's the big fear in the emulation community. That a court case could go the wrong way, endangering not just one emulator, but all of them. For programmers in it for the technical challenge or the preservation of gaming history, you can see why the ethics of emulation are so important. Stay out of ethical trouble, and the rest of the emulation community can hopefully stay out of legal trouble, too. Topics", "external_links": [], "published": "2017-03-29T04:24:00.000+03:00", "crawled": "2017-03-29T01:02:42.691+03:00", "highlightTitle": ""}