{"organizations": [], "uuid": "a458eb9665955d3c3e3b9600140f89a4423b8552", "thread": {"social": {"gplus": {"shares": 24}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 69}, "facebook": {"likes": 136, "shares": 136, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "arstechnica.com", "main_image": "https://cdn.arstechnica.net/wp-content/uploads/2014/04/hacked_by_xxdigipxx-d4ozzco-640x215.png", "site_section": "http://feeds.arstechnica.com/arstechnica/BAaf", "section_title": "Ars Technica", "url": "https://arstechnica.com/security/2017/02/new-aslr-busting-javascript-is-about-to-make-drive-by-exploits-much-nastier/", "country": "US", "domain_rank": 1109, "title": "New ASLR-busting JavaScript is about to make drive-by exploits much nastier", "performance_score": 1, "site": "arstechnica.com", "participants_count": 1, "title_full": "New ASLR-busting JavaScript is about to make drive-by exploits much nastier | Ars Technica", "spam_score": 0.0, "site_type": "blogs", "published": "2017-02-15T13:52:00.000+02:00", "replies_count": 0, "uuid": "a458eb9665955d3c3e3b9600140f89a4423b8552"}, "author": "Dan Goodin", "url": "https://arstechnica.com/security/2017/02/new-aslr-busting-javascript-is-about-to-make-drive-by-exploits-much-nastier/", "ord_in_thread": 0, "title": "New ASLR-busting JavaScript is about to make drive-by exploits much nastier", "locations": [], "entities": {"persons": [{"name": "keveh razavi", "sentiment": "none"}, {"name": "erik bosman", "sentiment": "none"}, {"name": "herbert bos", "sentiment": "none"}, {"name": "cristiano giuffrida", "sentiment": "none"}, {"name": "ben gras", "sentiment": "none"}], "locations": [], "organizations": [{"name": "aslr", "sentiment": "none"}, {"name": "university of amsterdam", "sentiment": "none"}, {"name": "amd", "sentiment": "none"}, {"name": "advanced micro devices", "sentiment": "none"}, {"name": "apple", "sentiment": "none"}, {"name": "mmu", "sentiment": "none"}, {"name": "intel", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "For a decade, every major operating system has relied on a technique known as address space layout randomization to provide a first line of defense against malware attacks. By randomizing the computer memory locations where application code and data are loaded, ASLR makes it hard for attackers to execute malicious payloads when exploiting buffer overflows and similar vulnerabilities. As a result, exploits cause a simple crash rather than a potentially catastrophic system compromise.\nFurther Reading How security flaws work: The buffer overflow Now, researchers have devised an attack that could spell the end of ASLR as the world knows it now. The attack uses simple JavaScript code to identify the memory addresses where system and application components are loaded. When combined with attack code that exploits vulnerabilities in browsers or operating systems, the JavaScript can reliably eliminate virtually all of the protection ASLR provides. The technique, which exploits what's known as a side channel in the memory cache of all widely used modern CPUs, is described in a research paper published on Wednesday . The researchers have dubbed the technique ASLR Cache or AnC for short.\n\"Fundamentally insecure\" The researchers said the side channel attack is much more damaging than previous ASLR bypasses, because it exploits a micro-architectural property of the CPU's that's independent of any operating system or application running on it. Whereas heap spraying and other forms of ASLR bypass can often be mitigated by software tweaks, there isn't much that can stop or lessen the effects of the JavaScript, which targets a CPU's MMU, or memory management unit. That's because CPU caching behavior and strong address space randomization are mutually exclusive. (Apple, however, recently hardened its Safari browser to partially mitigate such attacks. It's also possible to prevent JavaScript from running in a browser, but such blocking often severely degrades a site's usability.)\nThe researchers wrote:\nIn this paper, we show that the problem is much more serious and that ASLR is fundamentally insecure on modern cache-based architectures. Specifically, we show that it is possible to derandomize ASLR completely from JavaScript, without resorting to esoteric operating system or application features. Unlike all previous approaches, we do not abuse weaknesses in the software (that are relatively easy to fix). Instead, our attack builds on hardware behavior that is central to efficient code execution: the fast translation of virtual to physical addresses in the MMU by means of page tables. As a result, all fixes to our attacks (e.g., naively disabling caching) are likely too costly in performance to be practical. To our knowledge, this is the first attack that side-channels the MMU and also the very first cache attack that targets a victim hardware rather than software component.\nThe researchers went on to combine their AnC JavaScript with attack code that exploits CVE-2013-0753, a now-patched use-after-free vulnerability in Firefox. Normally, ASLR protections in the 64-bit version of the browser require a separate information-disclosure exploit to achieve code execution. Using AnC, however, the researchers were able to mount an end-to-end attack that completely hijacked the control flow without any such information-disclosure exploit. Below is a video of the technique:\nAnC or ASLR^Cache demonstration in Firefox AnC works by using what's known as an EVICT+TIME cache attack that detects which memory locations are accessed by a CPU's MMU. The researchers identified 22 microarchitectures from Intel, Advanced Micro Devices and ARM that were vulnerable. They went on to say they have yet to test an architecture that didn't provide the MMU signal necessary to exploit the side channel. The vulnerabilities are indexed as CVE-2017-5925 as they apply to Intel processors, CVE-2017-5926 for AMD processors, CVE-2017-5927 for ARM processors, and CVE-2017-5928 for a timing issue affecting multiple browsers. The paper was written by Ben Gras, Keveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida of the VUsec systems security group at the University of Amsterdam. They have published this resource page with additional information about the technique.\nGiven how crucial caching is to the performance of modern CPUs, the researchers say architectural fixes are likely to be too costly to be feasible. And even if hardware mitigations are possible—say, by creating a separate cache for page tables—the researchers warn that the vulnerability may resurface in software. They conclude their findings with a recommendation that's sure to get the attention of software developers everywhere:\n\"We hence recommend ASLR to no longer be trusted as a first line of defense against memory error attacks and for future defenses not to rely on it as a pivotal building block.\"", "external_links": [], "published": "2017-02-15T13:52:00.000+02:00", "crawled": "2017-02-15T09:06:57.653+02:00", "highlightTitle": ""}