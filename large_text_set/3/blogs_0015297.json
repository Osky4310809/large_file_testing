{"organizations": [], "uuid": "e9b5ee2bd33d135c289dfec28d3ff3c7df6ee2dd", "thread": {"social": {"gplus": {"shares": 6}, "pinterest": {"shares": 4}, "vk": {"shares": 0}, "linkedin": {"shares": 2}, "facebook": {"likes": 152, "shares": 152, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "tutorialzine.com", "main_image": "", "site_section": "http://tutorialzine.com/feed", "section_title": "Tutorialzine", "url": "http://tutorialzine.com/2017/03/css-triangles-without-hacks/", "country": "US", "domain_rank": 12107, "title": "Finally! CSS Triangles Without Ugly Hacks", "performance_score": 1, "site": "tutorialzine.com", "participants_count": 1, "title_full": "Finally! CSS Triangles Without Ugly Hacks", "spam_score": 0.0, "site_type": "blogs", "published": "2017-03-20T21:02:00.000+02:00", "replies_count": 0, "uuid": "e9b5ee2bd33d135c289dfec28d3ff3c7df6ee2dd"}, "author": "Danny Markov", "url": "http://tutorialzine.com/2017/03/css-triangles-without-hacks/", "ord_in_thread": 0, "title": "Finally! CSS Triangles Without Ugly Hacks", "locations": [], "entities": {"persons": [{"name": "danny markov", "sentiment": "negative"}], "locations": [], "organizations": [{"name": "svg", "sentiment": "none"}, {"name": "firefox", "sentiment": "none"}, {"name": "css", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "  Finally! CSS Triangles Without Ugly Hacks Danny Markov March 20th, 2017 \nAnyone who has tried to make HTML upvote arrows, speech bubbles or other pointy elements, knows that in order to create a CSS-only triangle you have to use some sort of hack. The two most popular solutions are to create your triangles out of borders , or to use unicode characters . \nWe have to admit that both these CSS hacks are pretty clever but they still are terrible solutions, and as such make our code much uglier and less flexible. For instance, we can’t have a triangle with a background image, since borders and characters can only be one color. Introducing Clip-path \nClip-path is a fairly new addition to the CSS spec that allows us to show only part of an element and hide the rest. Here is how it works: \nLet’s say we have an ordinary rectangular div element. You can click Run in the editor below to view the rendered HTML. div { width: 200px; height: 200px; background: url(https://goo.gl/BeSyyD); } <div></div> \nTo make a triangle we will need the polygon() function. It expects as argument comma separated 2D points which will define the shape of our mask. A triangle = 3 points. Try and change the values to see how the shape transforms. div { width: 200px; height: 200px; background: url(https://goo.gl/BeSyyD); /* The points are: centered top, left bottom, right bottom */ clip-path: polygon(50% 0, 0 100%, 100% 100%); } <div></div> \nEverything inside the path we created stays, everything outside it is hidden. This way we can make not only triangles, but all sorts of asymmetrical shapes that will behave like regular CSS blocks. \nThe only drawback of this technique is that we have to carefully calculate the coordinates of our points in order to get a good looking triangle. \nStill, it’s way better than using borders or ▲. Browser Support \nIf you open the caniuse page for clip-path things don’t look very good at first sight, but in reality the property works perfectly fine unprefixed in Chrome and with the -webkit- prefix in Safari. Firefox users have to wait till version 53. IE/Edge is behind the curve as usual but we can expect support sometime in the future. Further Reading \nThe clip-path property has many other tricks up its sleeve, including some SVG magic. To find out more about it check out the links below. Clip-path on MDN – here In-depth tutorial for clip-path on Codrops – here Clippy, a clip-path generator – here  ", "external_links": [], "published": "2017-03-20T21:02:00.000+02:00", "crawled": "2017-03-20T17:11:07.774+02:00", "highlightTitle": ""}