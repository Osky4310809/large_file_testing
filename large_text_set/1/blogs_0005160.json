{"organizations": [], "uuid": "495fc0d32f8f807998baf01025645eaa0f30171c", "thread": {"social": {"gplus": {"shares": 0}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 8}, "facebook": {"likes": 117, "shares": 117, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "www.codeproject.com", "main_image": "", "site_section": "http://www.codeproject.com/WebServices/ArticleRSS.aspx?cat=1", "section_title": "CodeProject Latest Articles", "url": "https://www.codeproject.com/Articles/1163878/Migrating-Your-Media-Assets-to-the-Cloud-Using-Clo", "country": "US", "domain_rank": 1434, "title": "Migrating Your Media Assets to the Cloud Using Cloudinary", "performance_score": 1, "site": "codeproject.com", "participants_count": 1, "title_full": "Migrating Your Media Assets to the Cloud Using Cloudinary", "spam_score": 0.0, "site_type": "blogs", "published": "2017-01-04T21:17:00.000+02:00", "replies_count": 0, "uuid": "495fc0d32f8f807998baf01025645eaa0f30171c"}, "author": "Cloudinary, Hadar_Bejerano", "url": "https://www.codeproject.com/Articles/1163878/Migrating-Your-Media-Assets-to-the-Cloud-Using-Clo", "ord_in_thread": 0, "title": "Migrating Your Media Assets to the Cloud Using Cloudinary", "locations": [], "entities": {"persons": [{"name": "jennifer lawrence", "sentiment": "none"}], "locations": [], "organizations": [{"name": "cloudinary management console", "sentiment": "none"}, {"name": "cdn", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "The first user who calls the Cloudinary URL will automatically upload the image to Cloudinary . Any subsequent request for the same image will be delivered via the CDN. \nThe Cloudinary URL is constructed as follows: \nres.cloudinary.com/<cloud-name>/image/upload/<mapped-folder>/<partial path of remote image> \nThe following API call also will return the required URL: cloudinary.url( \" media/koala.jpg\" ); \nHybrid approach – Run a script to upload the \"hot\" group of your most commonly used media assets and use the \"lazy migration\" option to upload the rest. You have a defined subset of your media assets that drives most of your traffic. \nFetch assets – Fetch media assets from remote locations and store them for a predefined period. Your images and videos originate from various online sources and they are used for a short timespan as in news items. \nFor example, the following code is used to deliver a remote image of Jennifer Lawrence fetched by Cloudinary from WikiMedia. cloudinary.url( \" http://upload.wikimedia.org/wikipedia/commons/4/46/Jennifer_Lawrence_at_the_83rd_Academy_Awards.jpg\" , {type: \" fetch\" }); The equivalent URL is : http: // res.cloudinary.com/cld-name/image/fetch/http://upload.wikimedia.org/wikipedia/commons/4/46/Jennifer_Lawrence_at_the_83rd_Academy_Awards.jpg \nUploading Large Files – If you are uploading files larger than 100MB, there is an option to do a chunked upload. cloudinary.v2.uploader.upload_large( \" my_large_image.tiff\" , { resource_type: \" image\" , chunk_size: 6 }, function (error, result) { console.log(error,result) }); Which files to upload? \nCloudinary is able to manipulate images and videos on-the-fly upon request or upon upload, so you only need to upload the highest resolution of one image or video. There is no need to upload large/medium/small variants. Access Control \nIf all of your media assets are not public, you can upload them and restrict their availability: Private files – The original files are not available unless accessed via a signed URL. Another option to provide access is creating a time-expired download URL. The following code example uploads the file as private: cloudinary.v2.uploader.upload( \" local_folder/private_image.jpg\" , {type: \" private\" }, function (error, result) { console.log(error,result) }); Authenticated files - The original files, as well as their derived ones, are not available unless accessed via a signed URL. For increased security, cookie-based authentication can be setup as well, in order to access them. Whitelisting referral domains – An additional optional security layer that restricts the access to your media assets is to setup a whitelist of referral domains. Then only URL requests arriving from those domains are allowed to access the file. Setting an Upload Policy Using an Upload Preset \nA convenient way to create a centralized upload policy is defining an upload preset. This enables you to define the transformations you would like to do once, then use the preset name to activate it upon upload. You can define several upload presets and use them according to different policies you have, for example watermark all images or transcode a video rendition of 640p wide resolution. \nWhen you define an upload preset you can set a transformation that will change the original file and then only the transformed file will be stored. This option is called \"incoming transformation.\" You also can define transformations that will be created as derived files, which will be stored in addition to the original file. This process is called \"eager transformation.\" Using Cloudinary , you can transform the images and video on-the-fly, therefore these options are required for cases you would like to process the transformation immediately upon upload. \nAs an example, the following code creates an upload preset that adds the tag \"remote.\" Unsigned determines if the preset can be used for unsigned uploads that can be done from the client side without having the API secret. Allowed formats defined the file formats allowed to be used with this preset. cloudinary.v2.api.create_upload_preset({ name: \" my_preset\" , unsigned: true , tags: \" remote\" , allowed_formats: \" jpg,png\" }, function (error, result) { console.log(error,result) }); \nThe following code uploads an image using this upload preset: cloudinary.v2.uploader.upload( \" smiling_man.jpg\" , { public_id: \" smile\" , upload_preset: \" my_preset\" }, function (error, result) { console.log(error,result) }); Upload Response \nAs a response to the upload call, you get some important information back. The response looks like this: { public_id: ' smile' , version: 1482935950 , signature: ' bfd5019ee4f513f30226cc06c750b2ad6eccceef' , width: 1743 , height: 1307 , format: ' jpg' , resource_type: ' image' , created_at: ' 2016-12-28T14:39:10Z' , tags: [], bytes: 642781 , type: ' upload' , etag: ' 7c26a0d7b72b6621bba1110da25d099e' , url: ' http://res.cloudinary.com/hadar-staging/image/upload/v1482935950/smile.jpg' , secure_url: ' https://res.cloudinary.com/hadar-staging/image/upload/v1482935950/smile.jpg' , original_filename: ' smiling_man' } Notification URL \nYou can tell Cloudinary to notify your application as soon as the upload completes by adding the notification_url parameter to the upload method and setting it to any valid HTTP or HTTPS URL. You also can set the notification_url parameter globally for all uploads on the Upload Settings page in the Cloudinary Management Console, instead of individually for each upload call. Uploading New Files \nFollowing a successful migration, you need to start uploading all the new media assets to Cloudinary . There are several ways to do it: manually via the Cloudinary account console, calling the upload API, using automatic upload. Another easy way to do that is using the ready-made upload widget. Upload Widget \nCloudinary's widget includes a complete graphical interface. The widget supports a drag and drop functionality, interactive cropping, upload progress indication and thumbnail previews. The widget also monitors and handles uploading errors. The following code example shows how to open the widget: <script src =\" //widget.cloudinary.com/global/all.js\" type =\" text/javascript\" > </ script > \nMore information regarding the widget functionality is available here . Summary \nThe steps detailed above are just the beginning of the journey of moving your media assets to the cloud. Once uploaded, Cloudinary supports a long list of image manipulation options , and the same goes for video . In addition, images can be optimized for faster delivery and support responsive design . \nNow is the time to let go, send your media assets to the cloud and set them free. License \nThis article, along with any associated source code and files, is licensed under The Code Project Open License (CPOL) Share", "external_links": [], "published": "2017-01-04T21:17:00.000+02:00", "crawled": "2017-01-05T04:18:22.242+02:00", "highlightTitle": ""}