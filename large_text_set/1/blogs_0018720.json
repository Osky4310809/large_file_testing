{"organizations": [], "uuid": "2697feb3dbfaacb8a1031b8de2fa16667e907c7a", "thread": {"social": {"gplus": {"shares": 20}, "pinterest": {"shares": 1}, "vk": {"shares": 0}, "linkedin": {"shares": 73}, "facebook": {"likes": 136, "shares": 136, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "blog.teamtreehouse.com", "main_image": "http://blog.teamtreehouse.com/wp-content/uploads/2016/05/1469.jpeg", "site_section": "http://blog.teamtreehouse.com/comments/feed", "section_title": "Comments for Treehouse Blog", "url": "http://blog.teamtreehouse.com/a-crash-course-in-technical-responsive-web-design-2", "country": "US", "domain_rank": 3967, "title": "Comment on A Crash Course in Technical Responsive Web Design by johnnychenseo.com/houston", "performance_score": 1, "site": "teamtreehouse.com", "participants_count": 1, "title_full": "Comment on A Crash Course in Technical Responsive Web Design by johnnychenseo.com/houston", "spam_score": 0.0, "site_type": "blogs", "published": "2017-01-18T10:16:00.000+02:00", "replies_count": 0, "uuid": "2697feb3dbfaacb8a1031b8de2fa16667e907c7a"}, "author": "johnnychenseo.com/houston", "url": "http://blog.teamtreehouse.com/a-crash-course-in-technical-responsive-web-design-2", "ord_in_thread": 0, "title": "Comment on A Crash Course in Technical Responsive Web Design by johnnychenseo.com/houston", "locations": [], "entities": {"persons": [], "locations": [], "organizations": [{"name": "css", "sentiment": "none"}, {"name": "apple", "sentiment": "none"}, {"name": "google", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "  A Crash Course in Technical Responsive Web Design  //blog.teamtreehouse.com/a-crash-course-in-technical-responsive-web-design-2. Captcha Submit \nAs a technical medium, Responsive Web Design (RWD) requires a working knowledge of the code that makes it work. Designers who ignore the basics fail to understand what browsers can and can’t do. \nCascading Stylesheets, or CSS , is the language that makes responsive web design possible. It’s a series of directives that spell out how browsers should display data depending on certain conditions like browser width. Now, understand that while most modern browsers obey the same rules in the same way, CSS rules are suggestions. \nLet’s review the fundamentals . CSS works with selectors and properties. Selectors: HTML affected by the CSS. Examples: HTML <p> elements, <li> elements and <div> elements. Properties: what the CSS will change on a given selector. Examples: Text color, border and padding. Values: the change itself. Examples: Red, 10px and sans-serif are three values. \nNow let’s put this together. div { color: #333; } has one selector, one property and one value. Media Queries Are the Technical Heart of Responsive Web Design \nTo account for different browsing conditions, responsive web design dictates that different rules must take place under different circumstances, usually the browser’s or device’s screen (the “viewport”) width. \nHow do we define these rules? Media queries . Media queries are CSS commands that determine under what conditions other CSS selectors take effect. \nFor example, one media query might tell a browser, “pay attention to rules 1–10 when the screen is up to 320 pixels wide,” while another might say, “pay attention to rules 11–20 when the screen is 321 pixels wide or greater.” Media queries are easy to identify: they begin with “@media”. Browsers read the CSS rules (e.g. selectors) listed between the media query’s { curly brackets }. \n\nAbove, CSS says to make all text red on visual devices, not screen readers. \nMedia queries can build upon each other. For example: \n@media screen and (width: 320px) { body { color: red; } } \nRules take effect on visual devices that display exactly 320 pixels horizontally. \nThe different minimum and maximum widths that media queries use are called breakpoints. A query that specifies (max-width: 768px) would change layouts when the viewport measures 0–768 pixels wide. Oddly, nothing actually “breaks” at that point. he term simply means that new rules will take effect within a given range, in this case 0–768 pixels, or the width of an average tablet. \nThere’s no technical limit to the number of conditions a media query can display. This query is perfectly valid: \n@media screen and (min-width: 480px) and (orientation: landscape) and (aspect-ratio: 4/3) and (color: true) { … } \nIt says that any color screen at least 480 pixels wide, held in landscape position, with an aspect ratio of 4 to 3 that’s exactly 320 pixels wide should take on certain properties. \nThe two most popular conditions are minimum and maximum width, the upper and lower limits a browser window can be to take on the given properties. But we can manipulate other important properties. \nResolution, for instance, suggests at what quality we should create our graphics. Screens capable of high-density graphics, e.g. Apple’s retina screens or high-res Android screens , will show text and vector art with crisp lines that make regular-density images look fuzzy. \n“High-density images” are those that use more device pixels (actual dots a browser can display) vs. those defined in CSS. That means for an image to look its best, it needs four times the usual number of pixels. Something displayed at 300×300 pixels on a small screen actually needs 600×600 pixels total — when our media queries detect high-res screens. \nIf you’re curious, here are additional properties we can control with media queries: Aspect-ratio: a comparison of a browser window’s width and height. Color: whether a device has a color screen or not. Color-index: the number of colors a screen can display. Device-aspect-ratio: a comparison of the screen’s width and height. Device-height: the number of pixels a displayed vertically by a device. Device-width: the number of pixels a displayed horizontally by a device. Height: the number of pixels displayed vertically by a browser viewport screen. Monochrome: how many bits that pixels in a grayscale screen uses. Orientation: whether a user is currently holding the device horizontally or vertically. Resolution: the number of pixels per inch or centimeter displayed by a screen. Width: the number of pixels a browser viewport uses horizontally. \nAs web layouts become more sophisticated , orientation and aspect ratio will help us decide how much to show users at a glance. The “fold” may not be relevant as users scroll, but what they see when they stop scrolling needs to be as self-contained as possible. \nFor now, though, width and resolution are most useful for responsive web design. Since contemporary site design lets us scroll up and down, width determines the available space a layout can use. Best Practice According to the Experts \nIt might not surprise you to learn that Google, whose search engine reads a page’s information and ignores viewports, recommend setting media queries by content , not specific devices. That makes sense as new devices appear every month, meaning device-based CSS would need constant updates. \nHere’s where media queries help us most: they allow us to plan for browsers based on content and capability, not expectations. That is, we can tell browsers that our designs look best under ranges of conditions, like 0–300 pixels vs. 301 – 600 pixels, and write our code to suit our needs rather than what the browser requires. \nGoogle also recommends adopting a mobile-first approach which, in addition to focusing on essential content that users want, encourages designers to use the fewest breakpoints possible. That means easier troubleshooting during development and maintenance later on. \nIf you’d like to learn more techniques for CSS media queries, we recommend the following resources:", "external_links": [], "published": "2017-01-18T10:16:00.000+02:00", "crawled": "2017-01-20T06:19:03.297+02:00", "highlightTitle": ""}