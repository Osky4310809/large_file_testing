{"organizations": [], "uuid": "3eff9190e3b0c0d8b6cef3e055aed84f60a2168d", "thread": {"social": {"gplus": {"shares": 22}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 60}, "facebook": {"likes": 519, "shares": 519, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "www.jetbrains.com", "main_image": "http://resources.jetbrains.com/storage/products/clion/banners/CL_2017_1@2x.png", "site_section": "https://www.jetbrains.com/rss.xml", "section_title": "JetBrains News", "url": "https://www.jetbrains.com/clion/whatsnew/", "country": "US", "domain_rank": 2122, "title": "CLion 2017.1 released: C++14, C++17, PCH, disassembly view, Catch, MSVC and more", "performance_score": 5, "site": "jetbrains.com", "participants_count": 0, "title_full": "CLion 2017.1 released: C++14, C++17, PCH, disassembly view, Catch, MSVC and more", "spam_score": 0.0, "site_type": "blogs", "published": "2017-03-29T23:00:00.000+03:00", "replies_count": 0, "uuid": "3eff9190e3b0c0d8b6cef3e055aed84f60a2168d"}, "author": "", "url": "https://www.jetbrains.com/clion/whatsnew/", "ord_in_thread": 0, "title": "CLion 2017.1 released: C++14, C++17, PCH, disassembly view, Catch, MSVC and more", "locations": [], "entities": {"persons": [{"name": "doxygen", "sentiment": "none"}, {"name": "alignas", "sentiment": "none"}], "locations": [{"name": "san francisco", "sentiment": "none"}, {"name": "darcula", "sentiment": "none"}], "organizations": [{"name": "pch", "sentiment": "negative"}, {"name": "doxygen", "sentiment": "none"}, {"name": "sf ns text", "sentiment": "none"}, {"name": "sierra", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "CLion can now correctly parse numbers that use single-quote character as a digit separator. Overload resolution improvements \nThe process of selecting the most appropriate overloaded function or operator can be tricky. As far as the IDE is concerned, selection of the correct candidate affects code navigation, parameter info view and code analysis. CLion 2016.3 handles this well and even introduces two new code inspections for such situations: Ambiguous call \nRead more Code analysis improvements \nStatic analysis (including DFA) in CLion helps you write beautiful and correct code. In 2016.3 we’ve reworked dozens of checks to avoid false-positives. This work includes: Correct tracking of variable usages in sizeof() , cin and cases when variable is passed by reference Correct handling of non-trivial destructors in the Unused variable inspection Support for __builtin_unreachable and __attribute__(unused) Platform-dependent code analysis And more C support \nCLion 2016.3 adds support for _Generic keyword, as well as code completion for specific C11 keywords such as _Thread_local , _Alignas , _Noreturn , _Static_assert , and _Atomic . \nThis version also brings support for gcc atomic builtins . CMake workflow Select generation directory \nUsers can now control the CMake generation directory inside CLion – not only the build directory where the final artifacts are stored. The corresponding setting is available in   CMake settings and allows in-source builds, among others. Select configuration \nTo save memory and time, CLion now doesn't build all four CMake configurations by default, but allows you to create additional CMake configurations (as many as you need). Create any number of CMake configurations from scratch, or copy existing ones, with all the settings pre-filled. Open project from existing directory \nOnce CMake generation is done for your project, you can now open it in CLion, saving time on project opening. CLion will reuse the generation directory content and CMakeCache.txt file. \nNote: Currently this works only for Makefiles generator. CMake tool window \nUpdated CMake tool window (View | Tool Windows | CMake) now includes CMake output logs, that can be used to track the progress and debug CMake scripts. CMake output console supports error highlighting, links to corresponding CMake files, and navigation to next/prev errors. CMake Cache \nCMakeCache file can be now updated directly in CLion’s editor. This makes it possible to introduce any change to it, including new CMake Cache variables. Project templates Templates for C and C++ projects \nIf you plan to start a project from scratch, use project templates to generate the sample project and pre-fill root CMakeLists.txt with the necessary information (like for example, language standard or library type for a library project). Debugger Remote debug on Windows \nRemote GDB debug comes to Windows. Use your Windows machine to debug applications running on another Windows or Linux host. Code highlighting Semantic highlighting \nUnlike the usual highlighting that picks out language keywords, types and values,   helps understand how data flow through the code by highlighting each variable/parameter with its own color. Switch it on in CLion in Editor | Color & Fonts | Language Defaults settings and give it a try! Highlighting and configurations \nWhen code depends on a set of variables and flags set in the run/build   see the difference in the editor immediately as you switch the configuration in CLion. Resolve context is updated automatically, while manual switcher is still available as before. \nRead more Unreal Engine support \nThis version brings performance improvements for reopening an UE4 project that was previously indexed in CLion, along with a couple of fixes for parsing UE4 code. The above enhancements along with several plugins make the overall UE4 experience in CLion much more pleasant and convenient. Doxygen tparam tag support \nDoxygen support in CLion includes documentation comment generation for functions, classes and structures. Template parameters are now handled correctly, and a \\ tparam (@tparam) tag is generated for them. \nAlso, renaming a template parameter will update the documentation accordingly. VCS Undo actions \nSometimes when working with version control, you change your mind at the last moment. CLion helps you undo certain actions to avoid any harm: undo the last change that you haven’t pushed yet; restore a deleted local branch. Sign-off commit \nLinux kernel patches and some other projects require Git –signoff commits to be used. CLion now makes this possible to do from the commit changes dialog. Resolve conflicts in one click \nSimple conflicts can now be resolved by the IDE. If you have several nonoverlapping changes on one line, CLion will show a special resolve icon in the merge dialog. Click the icon to have the conflict resolved by the IDE. Git remotes \nManage remotes through the VCS | Git menu. Now you can add, edit and remove remotes for every repo in the project. Filters in Git/Mercurial log \nCLion now builds an index for all commits on first-time project opening and later update it on a log refresh. This improves the performance of text, author and path filters in the Git log. Git/Mercurial log UI changes \nA new design for branches and tags in Git/Hg Log makes it cleaner and easier to use: labels have moved to the right; commit messages in the table are now aligned; commit details have moved to the right. UI enhancements Find in Path \nThe Find in Path dialog now keeps previously used settings (scope, file name filter, context, etc.), regardless of where you call it from. San Francisco font \nOn macOS, the default font in the Default and Darcula themes is now San Francisco (SF NS Text). It’s used across all the menus and tool windows. Fira Code font \nCLion 2016.3 bundles the FiraCode font, so font ligatures are now much easier to use. To set is as your editor font, select it in settings   Font. macOS support \nCLion 2016.3 includes a fix for extremely sensitive scrolling with a trackpad on macOS Sierra. \nAlso, the native file chooser on macOS is back. 2016.2 Jul 20 Doxygen support Doxygen-styled docs viewer \nIf a project includes Doxygen-styled documentation, you can easily preview it in the Quick Documentation pop-up Ctrl+Q . It includes Doxygen-styled information (parsed and formatted) along with the type information. Safe Rename \nRename Shift+F6 a function or its parameters and be sure CLion will update the corresponding information in the Doxygen comments for you. Completion \nWhen writing Doxygen comments, benefit from auto-completion for Doxygen commands and function parameter names. Doxygen comments generation \nStubs for Doxygen comments can be generated automatically with CLion. If your function has parameters, returns a value or throws an exception, type “/**”, “/*!”, “///” or “//!” and then press Enter to generate a Doxygen stub for the function. Code generation Generate operators \nCLion is ready to help you with boilerplate code. With version 2016.2 generate equality, relational and stream output operators in one click. Select std::tie , 'generate as class members' and other options as necessary. \nRead more Generate definitions \nA new setting called Generate in-place makes the Generate Definitions dialog more flexible. The defaults for this setting depend on your code, and heuristics are implemented to support the most common cases (like header-only or cpp-only classes).", "external_links": [], "published": "2017-03-29T23:00:00.000+03:00", "crawled": "2017-03-29T21:20:09.902+03:00", "highlightTitle": ""}