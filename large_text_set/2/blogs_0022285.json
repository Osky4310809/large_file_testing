{"organizations": [], "uuid": "c0e7b89b0fb97e5eba14c751638c19175d79c42f", "thread": {"social": {"gplus": {"shares": 3}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 46}, "facebook": {"likes": 202, "shares": 202, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "blog.xamarin.com", "main_image": "https://s3.amazonaws.com/blog.xamarin.com/wp-content/uploads/2017/02/21055333/Screenshot-2017-02-21-13.17.15.png", "site_section": "https://blog.xamarin.com/feed", "section_title": "Xamarin Blog", "url": "https://blog.xamarin.com/building-your-first-macos-app/", "country": "US", "domain_rank": 8729, "title": "Building Your First macOS App", "performance_score": 2, "site": "xamarin.com", "participants_count": 1, "title_full": "Building Your First macOS App", "spam_score": 0.0, "site_type": "blogs", "published": "2017-02-23T02:39:00.000+02:00", "replies_count": 0, "uuid": "c0e7b89b0fb97e5eba14c751638c19175d79c42f"}, "author": "Adam Hartley", "url": "https://blog.xamarin.com/building-your-first-macos-app/", "ord_in_thread": 0, "title": "Building Your First macOS App", "locations": [], "entities": {"persons": [{"name": "xamarin", "sentiment": "negative"}, {"name": "adam hartley", "sentiment": "negative"}, {"name": "xcode", "sentiment": "none"}, {"name": "timerlabel", "sentiment": "none"}], "locations": [{"name": "xamarin studio", "sentiment": "none"}], "organizations": [{"name": "apple", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "By Adam Hartley February 22, 2017 iOS , Xamarin Platform \nWhen developers think of building Xamarin apps for Apple devices, they often think of iPhone and iPad, but you can also build apps for macOS. While not exactly the same as its iOS counterpart, there are many transferable skills for iOS developers looking to build apps for macOS. With Xamarin.Mac, developers can create great macOS apps with the simplicity of C#. \nIn this blog post, you’ll learn how to create your first macOS app in C#: a Pomodoro timer to keep us productive. Getting Started \nBuilding apps for macOS starts just like any other application, with File > New . Note that you’ll need to have Xamarin.Mac installed on your macOS device; building macOS apps from Visual Studio is unsupported. \nFile > New Solution > Mac > App > Cocoa App \nNext we need to enter the app name; we’ll call this “Pomodoro.” \nThe Dock Item and Extension options are customizable, but for now we’ll leave them unchecked and with the blank / default values. We’ll visit these in a later blog post. \nWe now have our basic macOS app! You can test it by running the app from the top-left of Xamarin Studio. Unlike Xamarin.iOS, there is no need to choose a target to run the app on, since the app will run right on your Mac. You should see something like this: Building a User Interface \nNow that we have a basic macOS app, it’s time to build out our user interface; a blank app isn’t very useful! \nXamarin.Mac uses Xcode’s Interface Builder to develop UIs. Just like iOS, macOS interfaces are built using storyboards. Storyboard support on macOS was introduced in 10.10 (Yosemite). For the sake of simplicity, we’ll concentrate on macOS 10.10 and higher. If your application needs to support 10.9 or lower, you’ll need to use .xib files, which you can read more about in our working with .xib files guide. \nIn the solution explorer, double-click Main.storyboard . Xcode will open automatically with a “stub” project and your storyboard will open in Interface Builder. \nThe first thing we see is our blank UI. Notice that there’s a menu bar within the storyboard; you can use this to customize the menu bar for your app. For now, let’s leave the menu as it is. \nAdding objects to our interface is somewhat similar to using the iOS designer in Xamarin Studio. On the bottom-right of the Interface Builder window, you’ll see the toolbox. You can view the available objects by selecting the icon “Show the Object library,” as shown here: \nWe can simply drag and drop the views on the view controller. To start with, let’s make an interface like the one below, which consists of a label and a button. \nFirst, find the Label object and then drag and drop the object into our View Controller. \nWe can do the same for the Push Button . \nTo edit the label and title for the button, you can either double-click to edit the text, or, in the Attributes Inspector in the top right, find the “Title” and edit it there. \nNow that we have our user interface created, it’s time to configure actions and outlets to work with the user interface in code. To do this, we need switch to the Assistant Editor, so at the top right of the main Xcode window, click the icon that looks like two overlapping circles. This should automatically bring up a file called “ViewController.h”. If it doesn’t, then, at the top of the new editor pane, click on “Automatic” and choose Manual > Pomodoro > Pomodoro > ViewController.h . Xcode should now look like this: \nSetting up actions and outlets in the header file (the .h file) will allow us to reference them from our Xamarin project. To run code when the button is clicked, we need to set up an action and to reference the label from our Xamarin project, we need to set up an outlet. \nHold down the Control key, then click and drag from the button to the line beneath the final closing brace in the right editor. In the pop-up window, change the Connection to Outlet and the name to TimerLabel and hit connect: \nThis will automatically populate the header file with the correct definition for the outlet: 1 @ property ( nonatomic , retain ) IBOutlet NSTextField * TimerLabel ; \nRepeat the same steps for the button, this time naming it StartStopButton . \nNow we need to add the action for the button. Hold down the Control key, then click and drag as before. This time, in the pop-up window, change the Connection to Action and the name to StartStopButtonClicked and hit connect: \nOnce complete, you should have the following definitions: 1", "external_links": [], "published": "2017-02-23T02:39:00.000+02:00", "crawled": "2017-02-23T04:45:11.829+02:00", "highlightTitle": ""}