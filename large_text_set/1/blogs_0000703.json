{"organizations": [], "uuid": "a54eb09f2eea168d1310afec17c7a2daf4702f75", "thread": {"social": {"gplus": {"shares": 1}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 2}, "facebook": {"likes": 194, "shares": 194, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "blogs.unity3d.com", "main_image": "https://blogs.unity3d.com/wp-content/uploads/2016/09/ogimg.jpg", "site_section": "http://blogs.unity3d.com/feed", "section_title": "Unity Technologies Blog", "url": "https://blogs.unity3d.com/2017/01/03/a-look-inside-scenario-testing-at-unity/", "country": "US", "domain_rank": 1510, "title": "A Look Inside: Scenario Testing at Unity", "performance_score": 1, "site": "unity3d.com", "participants_count": 1, "title_full": "A Look Inside: Scenario Testing at Unity", "spam_score": 0.0, "site_type": "blogs", "published": "2017-01-03T21:02:00.000+02:00", "replies_count": 0, "uuid": "a54eb09f2eea168d1310afec17c7a2daf4702f75"}, "author": "Claus Petersen", "url": "https://blogs.unity3d.com/2017/01/03/a-look-inside-scenario-testing-at-unity/", "ord_in_thread": 0, "title": "A Look Inside: Scenario Testing at Unity", "locations": [], "entities": {"persons": [], "locations": [{"name": "unity share", "sentiment": "none"}], "organizations": [{"name": "ps vita", "sentiment": "none"}, {"name": "unity collaborate and unity cloud build", "sentiment": "none"}, {"name": "asset store", "sentiment": "none"}, {"name": "general graphics", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "Share on Twitter As outlined in the Unity Engine QA Process blogpost , every Unity release goes through a number of test phases before it is released. Here I would like to dive in and present one of them: Scenario Test Week (dubbed FTP v2 in the previous blogpost). \nSimply put, it’s testing by creating games. We prepare for it by creating a number of scenarios – a short pitch for a game project. Examples could be “3D Racing Game”, “2D Platformer” and so on. Then we group participants into teams, assign each team a scenario and then the teams have one week to create a game based on that simple premise. \nFor testing our most recent release (at this time of writing), Unity 5.5, we had 14 scenarios and 53 participants, including testers, student workers and developers. \nBut scenario testing is more than a game jam. It’s a testing phase with a very specific goal: Find bugs by using the Editor in a credible way. We have made a breakdown of Editor features and platforms and mapped it to the different scenarios to get as wide coverage as possible. We make sure that features are covered by more than one scenario. By having scenarios be different game genres, we ensure that the features are used in different ways. \nAreas mapped to different scenarios/teams for 5.5 Scenario Test Week \nDifferent test approaches find different problems. We have more than 60000 automated tests with millions of executions each month. Our manual regression suite – Full Test Pass – consists of thousands of manual test-cases that provide a comprehensive sweep of the functionality in Unity. This is all great and invaluable! But broadly speaking, these kinds of tests tend to exercise functionality in isolation. Some errors appear when you combine features. Or they appear over time. Something might work the first five times you do it, only to fail the sixth. Furthermore – again, broadly speaking – test automation and manual test-cases repeat the same test over and over again. And while the scope of what we achieve with automation is impressive, it’s still only a tiny fraction of the theoretical possibility space for how Unity can be interacted with. \nWith Scenario Testing we address some of these shortcomings. When you create a game, you don’t simply methodically go over each feature of a product. You get repetition of actions, you get randomness and the Editor will be interacted with in ways that are impossible to predict when designing a feature or even a set of tests. And most importantly, the Editor is used in a way that is credible. Even if it’s an approximation, we get to feel some of the joy and frustration that our end-users feel. This is powerful. Chomping on your own dog-food is always a good thing… \nBugs reported during 5.5 Scenario Test Week \nHere is an example of the kinds of feedback yielded by scenario testing. One of the scenarios was to create a Real Time Strategy game (screenshot below). It was intended to obtain coverage for AI, Particles and Terrain. However, once the game was taking shape, naturally the idea came up to add multiplayer. And very quickly the team ran into problems adapting their game to the current networking system. But the upside was that they were able to take this feedback to the networking team who could use it to inform future decisions regarding networking in Unity. We got this feedback because the conventions of a particular game genre inspired us to use our game engine in a certain way. And we got it even though networking was not part of the coverage scoped for the scenario. Automation or manual test-cases will not give you this kind of information. \nWe are continuously looking for ways to improve how we do Scenario Testing. One thing we are looking at is continuing work on some of the scenarios across multiple Scenario Test Weeks (i.e. multiple versions of Unity). Until now, we started over with new game productions each test-phase. We hope that this can give us a better approximation of both upgrading Unity during a production and also working on a project for longer than hacking the first prototype together. \nWe don’t presume that our little scenarios can accurately replicate the experience of working with Unity on a real project. Still, we feel that we can make a pretty good approximation Scenario Testing. And – not to forget – it’s actually a fun way to test Unity. \nHere are a few small samples of projects that were created during Scenario Test Week for Unity 5.5. Note that in addition to the coverage mentioned for each project, all projects also used Unity Collaborate and Unity Cloud Build . We dog-food our services offerings as well. Asset Store is also tremendously helpful as it allows teams to use high-quality assets in their projects. Not only does this boost the production value of the games, it also contributes to testing by allowing more complex and realistic data/assets to be used. \nFPS game Team size: 4 people. Target platform: Desktop. Focus areas: Audio, General Graphics, Substances, Post-processing \n3D RTS Team size: 4 people. Target platform: Desktop. Focus areas: AI, Particles, Terrain/SpeedTree integration \n\n2D JRPG Team size: 3 people. Target platform: Android. Focus areas: 2D, UI, Particles \n\n2D Platformer Team size: 3 people. Target platforms: iOS, TVOS, PS Vita. Focus areas: 2D, Animation 2D, Physics 2D \n\nVR Museum Team size: 2 people. Target platform: VR. Focus areas: Graphics – general, Lighting, Post Processing \n\nSlender Man clone Team size: 3 people. Target platforms: PS 4, VR. Focus areas: Graphics – general, Terrain/SpeedTree integration, Substance integration", "external_links": [], "published": "2017-01-03T21:02:00.000+02:00", "crawled": "2017-01-03T18:11:46.114+02:00", "highlightTitle": ""}