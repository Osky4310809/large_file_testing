{"organizations": [], "uuid": "04e66ff51f7c518a9c6fd3e8d69545b995f65797", "thread": {"social": {"gplus": {"shares": 9}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 98}, "facebook": {"likes": 253, "shares": 253, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "blogs.msdn.microsoft.com", "main_image": "", "site_section": "https://social.msdn.microsoft.com/search/en-US/feed?query=blogs&refinement=109", "section_title": "Search Msdn", "url": "https://blogs.msdn.microsoft.com/dotnet/2017/02/07/announcing-net-core-tools-updates-in-vs-2017-rc/", "country": "US", "title": "Announcing .NET Core Tools Updates in VS 2017 RC", "performance_score": 2, "site": "microsoft.com", "participants_count": 0, "title_full": "Announcing .NET Core Tools Updates in VS 2017 RC", "spam_score": 0.0, "site_type": "blogs", "published": "2017-03-12T08:21:00.000+02:00", "replies_count": 0, "uuid": "04e66ff51f7c518a9c6fd3e8d69545b995f65797"}, "author": "", "url": "https://blogs.msdn.microsoft.com/dotnet/2017/02/07/announcing-net-core-tools-updates-in-vs-2017-rc/", "ord_in_thread": 0, "title": "Announcing .NET Core Tools Updates in VS 2017 RC", "locations": [], "entities": {"persons": [{"name": "xunittest", "sentiment": "none"}, {"name": "sayed hashimi", "sentiment": "none"}, {"name": "yeoman", "sentiment": "none"}, {"name": "docker", "sentiment": "none"}, {"name": "sayed", "sentiment": "none"}], "locations": [{"name": "visual studio", "sentiment": "none"}], "organizations": [{"name": "mvc", "sentiment": "none"}, {"name": "supported linux distros  fedora", "sentiment": "none"}, {"name": "sdk", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "A first-hand look from the .NET engineering teams Announcing .NET Core Tools Updates in VS 2017 RC ★ ★ ★ ★ ★ 0 \nToday, we are releasing updates to the .NET Core SDK, included in Visual Studio 2017 RC. You can also install the .NET Core SDK for use with Visual Studio Code or at the command line, on Windows, Mac and Linux. Check out the Visual Studio blog to learn more about this Visual Studio 2017 update . \nThe following improvements have been made in the release: Templates — dotnet new has been updated and now is based on a new templating engine. The location of the .NET Standard class library template, in Visual Studio, has been moved to the new .NET Standard node, based on feedback. Quality — ~50 fixes have been made across the tools to improve product reliability. \nThe quality fixes have been made across the .NET CLI, NuGet, MSBuild and also in Visual Studio. We will continue to squash bugs as we get closer to Visual Studio 2017 RTM. Please continue sharing your feedback on the overall experience. Getting the Release \nThis .NET Core SDK release is available in Visual Studio 2017 RC, as part of the .NET Core cross-platform development workload. It is also available in the ASP.NET and web development workload and an optional component of the .NET desktop development workload. These workloads can be selected as part of the Visual Studio 2017 RC installation process. The ability to build and consume .NET Standard class libraries is available in the all of the above workloads and in the Universal Windows Platform development workload. \nYou can also install the .NET Core SDK release for use with Visual Studio code or with the command-line use on Windows, macOS and Linux by following the instructions at .NET Core 1.0 – RC4 Download . \nThe release is also available as Docker images, in the dotnet repo . The following SDK images are now available: 1.0.3-sdk-msbuild-rc4 \nThe aspnetcore-build repo has also been updated. Changes to Docker Images \nWe made an important change with this release to the tags in the dotnet repo . The latest and nanoserver tags now refer to MSBuild SDK images. The latest tag now refers to the same image as 1.1.0-sdk-msbuild-rc4 , while nanoserver now refers to the same image as 1.1.0-sdk-msbuild-rc4-nanoserver . Previously, those two tags refered to the same image as 1.1.0-sdk-projectjson-rc3 and 1.1.0-sdk-projectjson-rc3-nanoserver , respectively. \nThis is a breaking change, since the msbuild SDK is not compatible with the project.json-based SDK. We need to start moving the .NET Core ecosystem to the msbuild SDK, sooner than expected. We had originally planned to make this change at Visual Studio 2017 RTM. The number of times the latest tag is being pulled is growing much faster than we expected, making the break worse with each passing day. As a result, we were compelled to make this change with this release. \nYou can continue to use the project-json images for now, listed below, to give you more time to transition to the msbuild images (see dotnet migrate ). Changing to these, more specific, tags is a one line change in a Dockerfile. 1.1.0-sdk-projectjson-rc3 1.1.0-sdk-projectjson-rc3-nanoserver \nNote: We are no longer updating the project.json images, so please do plan your transition to the msbuild images. For example, only the msbuild SDK images will be updated when we release the 1.0.4 and 1.1.1 runtime updates (we expect) later this quarter. \nWe apologize if you are broken by this change. We will be providing general guidance on how to best use our tags to avoid a similar situation in future. We’ve been learning a lot about Docker over the last several months, particularly around versioning and naming. Expect a blog post soon on this topic that addresses these issues. Changes to Supported Linux Distros \nFedora 23 and openSUSE 13.2 recently went out of support, per their respective project lifecycle. As a result, we are now no longer supporting or building for Fedora 23 and openSUSE 13.2. \nWe will be publishing a more formal policy on Linux distro support, in particular on managing end-of-life of distros. There will be opportunity for feedback on the policy before it is finalized. Project Files \nIn the RC3 release, we made major improvements to make the csproj project files smaller. If you are using .NET Core project files created with earlier Visual Studio 2017 versions (before RC3), you should read the Updating Project Files section of the RC3 blog post to learn about changes you need to make to your project files. dotnet new \nThe dotnet new command is one of the most important parts of the .NET Core tools experiences. It is useful for both new and experienced .NET Core users. I know that people who use and test the product on a daily basis use dotnet new all the time for experiments and prototypes. I do! It’s also documented on a lot of websites and markdown pages to help users get started with .NET Core. That said, we always knew that dotnet new was a little lacking and decided to improve it. \nIn short, we want dotnet new to have the following characteristics: Powerful — expressive and scriptable command-line syntax. Helpful — an interactive mode helps users pick the templates they need (think Yeoman). Extensible — anyone can write templates for dotnet new ! Updatable — templates can be updated outside of primary delivery vehicles (e.g. Visual Studio, .NET Core SDK). Platform — can be used by tools like Visual Studio and generator-aspnet (think yo aspnet ). \ndotnet new is now based on a new templating engine, which you can check out at dotnet/templating . It already does a great job satisfying what the RC3 version of dotnet new did. We’ll continue to add to it and improve it over the next several months, getting it to the point that it satisfies all the characteristics above. For the immediate term, we’re focussed on ensuring that it has the right quality level for Visual Studio 2017 RTM. Improvements \nWe have updated dotnet new in the RC4 release with the following features: \nYou can now specify a target directory for your new template, with the -o argument, such as in the following example: dotnet new console -o awesome-new-tool . If the target directory does not exist, it will be created for you. This can also be combined with the -n argument to name projects, such as in the following example: dotnet new console -n awesome-new-tool -o src/awesome . \nTarget frameworks now have their own argument, -f . You can specify a target framework for any template, provided it is a legal value, such as in: dotnet new console -f netcoreapp1.0 . The target framework values are the same as the ones used in the project files. \nSolution file management has been improved. You can now create an empty solution file with dotnet new sln and then add projects to it. You can create solution files before or after project files, depending on your preferred workflow. If you have been using the older project.json-based tooling, you can think of solution files as the replacement for global.json files. Important Changes \nThe basic dotnet new (no arguments) experience no longer default to creating a console template, as it did in RC3 and earlier releases. The dotnet new command will now print the available set of templates, much like dotnet new --help . In a later release, we may update dotnet new to start an interactive new template experience, which helps you select the right template based on a series of questions. \nThe new commandline has been streamlined. To create templates, you type dotnet new console or dotnet new web for console app or MVC templates respectively. The RC3 and earlier tools versions required a -t argument before the template name, such as dotnet new -t web . \nSome of the template names changed, specifically Lib (now classlib ) and Xunittest (now xunit ). For RC4, you will need to use the new template names. Walkthrough of the new template experience \nYou are probably curious about the new dotnet new experience. Sayed Hashimi, the Program Manager for dotnet new , wrote the following walkthrough to give you a good idea of what to expect. That said, I encourage you to install the RC4 SDK and try it out for yourself. \nSayed’s walkthrough was done on Linux. You can replicate the same experience on Windows. Just make sure to replace the Linux commands with the ones you are using in your favorite Windows shell. Getting familiar with the new new \nFirst let’s get a little familiar with new by displaying the help using the dotnet new --help . The result is shown below. $ dotnet new --help Template Instantiation Commands for .NET Core CLI. Usage: dotnet new [arguments] [options] Arguments: template The template to instantiate. Options: -l|--list List templates containing the specified name. -lang|--language Specifies the language of the template to create -n|--name The name for the output being created. If no name is specified, the name of the current directory is used. -o|--output Location to place the generated output. -h|--help Displays help for this command. -all|--show-all Shows all templates Templates Short Name Language Tags", "external_links": [], "published": "2017-03-12T08:21:00.000+02:00", "crawled": "2017-03-12T03:22:18.094+02:00", "highlightTitle": ""}