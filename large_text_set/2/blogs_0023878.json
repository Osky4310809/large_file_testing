{"organizations": [], "uuid": "070798b7f495ca34b65b1ab8aab02268bfb1bb73", "thread": {"social": {"gplus": {"shares": 0}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 27}, "facebook": {"likes": 123, "shares": 123, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "blog.wolfram.com", "main_image": "", "site_section": "http://blog.wolfram.com/feed", "section_title": "Wolfram Blog", "url": "http://blog.wolfram.com/2017/02/24/hidden-figures-modern-approaches-to-orbit-and-reentry-calculations/", "country": "US", "domain_rank": 5323, "title": "Hidden Figures: Modern Approaches to Orbit and Reentry Calculations", "performance_score": 1, "site": "wolfram.com", "participants_count": 1, "title_full": "Hidden Figures: Modern Approaches to Orbit and Reentry Calculations", "spam_score": 0.0, "site_type": "blogs", "published": "2017-02-25T01:08:00.000+02:00", "replies_count": 0, "uuid": "070798b7f495ca34b65b1ab8aab02268bfb1bb73"}, "author": "Jeffrey Bryant", "url": "http://blog.wolfram.com/2017/02/24/hidden-figures-modern-approaches-to-orbit-and-reentry-calculations/", "ord_in_thread": 0, "title": "Hidden Figures: Modern Approaches to Orbit and Reentry Calculations", "locations": [], "entities": {"persons": [{"name": "jeffrey bryant", "sentiment": "negative"}, {"name": "johnson", "sentiment": "none"}, {"name": "dorothy vaughan", "sentiment": "none"}, {"name": "john glenn", "sentiment": "none"}, {"name": "wolfram language", "sentiment": "none"}, {"name": "hicks", "sentiment": "none"}, {"name": "euler", "sentiment": "none"}, {"name": "glenn", "sentiment": "none"}, {"name": "newton", "sentiment": "none"}, {"name": "katherine johnson", "sentiment": "none"}, {"name": "wolfram", "sentiment": "none"}, {"name": "mary jackson", "sentiment": "none"}], "locations": [{"name": "united states", "sentiment": "none"}, {"name": "us", "sentiment": "none"}, {"name": "earth", "sentiment": "none"}, {"name": "cape canaveral", "sentiment": "none"}, {"name": "florida", "sentiment": "none"}], "organizations": [{"name": "research programmer", "sentiment": "none"}, {"name": "igf", "sentiment": "none"}, {"name": "wolfram language", "sentiment": "none"}, {"name": "scientific information group paco jain", "sentiment": "none"}, {"name": "nasa", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "Hidden Figures: Modern Approaches to Orbit and Reentry Calculations February 24, 2017 Jeffrey Bryant , Scientific Information Group Paco Jain , Research Programmer, Wolfram|Alpha Scientific Content   \nThe movie Hidden Figures was released in theaters recently and has been getting good reviews. It also deals with an important time in US history, touching on a number of topics, including civil rights and the Space Race. The movie details the hidden story of Katherine Johnson and her coworkers ( Dorothy Vaughan and Mary Jackson ) at NASA during the Mercury missions and the United States’ early explorations into manned space flight. The movie focuses heavily on the dramatic civil rights struggle of African American women in NASA at the time, and these struggles are set against the number-crunching ability of Johnson and her coworkers. Computers were in their early days at this time, so Johnson and her team’s ability to perform complicated navigational orbital mechanics problems without the use of a computer provided an important sanity check against the early computer results. \nI will touch on two aspects of her scientific work that were mentioned in the film: orbit calculations and reentry calculations. For the orbit calculation, I will first exactly follow what Johnson did and then compare with a more modern, direct approach utilizing an array of tools made available with the Wolfram Language . Where the movie mentions the solving of differential equations using Euler’s method , I will compare this method with more modern ones in an important problem of rocketry: computing a reentry trajectory from the rocket equation and drag terms (derived using atmospheric model data obtained directly from within the Wolfram Language). \nThe movie doesn’t focus much on the math details of the types of problems Johnson and her team dealt with, but for the purposes of this blog, I hope to provide at least a flavor of the approaches one might have used in Johnson’s day compared to the present. Placing a Satellite over a Selected Position \nOne of the earliest papers that Johnson coauthored, “ Determination of Azimuth Angle at Burnout for Placing a Satellite over a Selected Earth Position ,” deals with the problem of making sure that a satellite can be placed over a specific Earth location after a specified number of orbits, given a certain starting position (e.g. Cape Canaveral, Florida) and orbital trajectory. The approach that Johnson’s team used was to determine the azimuthal angle (the angle formed by the spacecraft’s velocity vector at the time of engine shutoff with a fixed reference direction, say north) to fire the rocket in, based on other orbital parameters. This is an important step in making sure that an astronaut is in the correct location for reentry to Earth. Constants and Initial Processing \nIn the paper, Johnson defines a number of constants and input parameters needed to solve the problem at hand. One detail to explain is the term “burnout,” which refers to the shutoff of the rocket engine. After burnout, orbital parameters are essentially “frozen,” and the spacecraft moves solely under the Earth’s gravity (as determined, of course, through Newton’s laws). In this section, I follow the paper’s unit conventions as closely as possible. \nFor convenience, some functions are defined to deal with angles in degrees instead of radians. This allows for smoothly handling time in angle calculations: \nJohnson goes on to describe several other derived parameters, though it’s interesting to note that she sometimes adopted values for these rather than using the values returned by her formulas. Her adopted values were often close to the values obtained by the formulas. For simplicity, the values from the formulas are used here. \nSemilatus rectum of the orbit ellipse: \nAngle in orbit plane between perigee and burnout point: \nOrbit eccentricity: \nOrbit period: \nEccentric anomaly: \nTo describe the next parameter, it’s easiest to quote the original paper: “The requirement that a satellite with burnout position φ 1, λ 1 pass over a selected position φ 2, λ 2 after the completion of n orbits is equivalent to the requirement that, during the first orbit, the satellite pass over an equivalent position with latitude φ 2 the same as that of the selected position but with longitude λ 2e displaced eastward from λ 2 by an amount sufficient to compensate for the rotation of the Earth during the n complete orbits, that is, by the polar hour angle n ω E T . The longitude of this equivalent position is thus given by the relation”: \nTime from perigee for angle θ : Computation \nPart of the final solution is to determine values for intermediate parameters δλ 1-2 e and θ 2 e . This can be done in a couple of ways. First, I can use ContourPlot to obtain a graphical solution via equations 19 and 20 from the paper: \nFindRoot can be used to find the solutions numerically: \nOf course, Johnson didn’t have access to ContourPlot or FindRoot , so her paper describes an iterative technique. I translated the technique described in the paper into the Wolfram Language, and also solved for a number of other parameters via her iterative method. Because the base computations are for a spherical Earth, corrections for oblateness are included in her method: \nGraphing the value of θ 2e for the various iterations shows a quick convergence: \nI can convert the method in a FindRoot command as follows (this takes the oblateness effects into account in a fully self-consistent manner and calculates values for all nine variables involved in the equations): \nInterestingly, even the iterative root-finding steps of this more complicated system converge quite quickly: Plotting \nWith the orbital parameters determined, it is desirable to visualize the solution. First, some critical parameters from the previous solutions need to be extracted: \nNext, the latitude and longitude of the satellite as a function of azimuth angle need to be derived: \nφ s and λ s are the latitudes and longitudes as a function of θ s: \nThe satellite ground track can be constructed by creating a table of points: \nJohnson’s paper presents a sketch of the orbital solution including markers showing the burnout, selected and equivalent positions. It’s easy to reproduce a similar plain diagram here: \n  is her original diagram: \nA more visually useful version can be constructed using GeoGraphics , taking care to convert the geocentric coordinates into geodetic coordinates: How to Calculate Orbits Today \nToday, virtually every one of us has, within immediate reach, access to computational resources far more powerful than those available to the entirety of NASA in the 1960s. Now, using only a desktop computer and the Wolfram Language, you can easily find direct numerical solutions to problems of orbital mechanics such as those posed to Katherine Johnson and her team. While perhaps less taxing of our ingenuity than older methods, the results one can get from these explorations are no less interesting or useful. \nTo solve for the azimuthal angle ψ using more modern methods, let’s set up parameters for a simple circular orbit beginning after burnout over Florida, assuming a spherically symmetric Earth (I’ll not bother trying to match the orbit of the Johnson paper precisely, and I’ll redefine certain quantities from above using the modern SI system of units). Starting from the same low-Earth orbit altitude used by Johnson, and using a little spherical trigonometry, it is straightforward to derive the initial conditions for our orbit: \nThe relevant physical parameters can be obtained directly from within   \nNext, I obtain a differential equation for the motion of our spacecraft, given the gravitational field of the Earth. There are several ways you can model the gravitational potential near the Earth. Assuming a spherically symmetric planet and utilizing a Cartesian coordinate system throughout, the potential is merely: \nAlternatively, you can use a more realistic model of Earth’s gravity, where the planet’s shape is taken to be an oblate ellipsoid of revolution. The exact form of the potential from such an ellipsoid (assuming constant mass-density over ellipsoidal shells), though complicated (containing multiple elliptic integrals), is available through EntityValue : \nFor a general homogeneous triaxial ellipsoid, the potential contains piecewise functions: \nHere, κ is the largest root of x 2 /( a 2 + κ )+ y 2 /( b 2 + κ )+ z 2 /( c 2 + κ )=1. In the case of an oblate ellipsoid, the previous formula can be simplified to contain only elementary functions… \n… where κ =((2 z 2 ( a 2 - c 2 + x 2 + y 2 )+(- a 2 + c 2 + x 2 + y 2 ) 2 + z 4 ) 1/2 - a 2 - c 2 + x 2 + y 2 + z 2 ) /2. \nA simpler form that is widely used in the geographic and space science community, and that I will use here, is given by the so-called International Gravity Formula (IGF). The IGF takes into account differences from a spherically symmetric potential up to second order in spherical harmonics, and gives numerically indistinguishable results from the exact potential referenced previously. In terms of four measured geodetic parameters, the IGF potential can be defined as follows: \nI could easily use even better values for the gravitational force through GeogravityModelData . For the starting position, the IGF potential deviates only 0.06% from a high-order approximation: \nWith these functional forms for the potential, finding the orbital path amounts to taking a gradient of the potential to get the gravitational field vector and then applying Newton’s third law. Doing so, I obtain the orbital equations of motion for the two gravity models: \nI am now ready to use the power of NDSolve to compute orbital trajectories. Before doing this, however, it will be nice to display the orbital path as a curve in three-dimensional space. To give these curves context, I will plot them over a texture map of the Earth’s surface, projected onto a sphere. Here I construct the desired graphics objects: \nWhile the orbital path computed in an inertial frame forms a periodic closed curve, when you account for the rotation of the Earth, it will cause the spacecraft to pass over different points on the Earth’s surface during each subsequent revolution. I can visualize this effect by adding an additional rotation term to the solutions I obtain from NDSolve . Taking the number of orbital periods to be three (similar to John Glenn’s flight) for visualization purposes, I construct the following Manipulate to see how the orbital path is affected by the azimuthal launch angle ψ , similar to the study in Johnson’s paper. I’ll plot both a path assuming a spherical Earth (in white) and another path using the IGF (in green) to get a sense of the size of the oblateness effect (note that the divergence of the two paths increases with each orbit): \nIn the notebook attached to this blog, you can see this Manipulate in action, and note the speed at which each new solution is obtained. You would hope that Katherine Johnson and her colleagues at NASA would be impressed! \nNow, varying the angle ψ at burnout time, it is straightforward to calculate the position of the spacecraft after, say, three revolutions: Modeling the Reentry of a Satellite \nThe movie also mentions Euler’s method in connection with the reentry phase. After the initial problem of finding the azimuthal angle has been solved, as done in the previous sections, it’s time to come back to Earth. Rockets are fired to slow down the orbiting body, and a complex set of events happens as the craft transitions from the vacuum of space to an atmospheric environment. Changing atmospheric density, rapid deceleration and frictional heating all become important factors that must be taken into account in order to safely return the astronaut to Earth. Height, speed and acceleration as a function of time are all problems that need to be solved. This set of problems can be solved with Euler’s method, as done by Katherine Johnson, or by using the differential equation-solving functionality in the Wolfram Language. \nFor simple differential equations, one can get a detailed step-by-step solution with a specified quadrature method. An equivalent of Newton’s famous F = m a for a time-dependent mass m ( t ) is the so-called ideal rocket equation (in one dimension)… \n… where m ( t ) is the rocket mass, v e the engine exhaust velocity and m ‘ p ( t ) the time derivative of the propellant mass. Assuming a constant m ‘ p ( t ), the structure of the equation is relatively simple and easily solvable in closed form: \nWith initial and final conditions for the mass, I get the celebrated rocket equation ( Tsiolkovsky 1903 ): \nThe details of solving this equation with concrete parameter values and e.g. with the classical Euler method I can get from Wolfram|Alpha . Here are those details together with a detailed comparison with the exact solution, as well as with other numerical integration methods: \nFollowing the movie plot, I will now implement a minimalistic ODE model of the reentry process. I start by defining parameters that mimic Glenn’s flight: \nI assume that the braking process uses 1% of the thrust of the stage-one engine and runs, say, for 60 seconds. The equation of motion is: \nHere, F grav is the gravitational force, F exhaust ( t ) the explicitly time-dependent engine force and F friction ( x ( t ), v ( t )) the friction force. The latter depends via the air density explicitly on the position x ( t ) and via the friction law on v ( t ). \nFor the height-dependent air density, I can conveniently use the StandardAtmosphereData function. I also account for a height-dependent area because of the parachute that opened about 8.5 km above ground: \nThis gives the following set of coupled nonlinear differential equations to be solved. The last WhenEvent [...] specifies to end the integration when the capsule reaches the surface of the Earth. I use vector-valued position and velocity variables X and V: \nWith these definitions for the weight, exhaust and air friction force terms… \n… total force can be found via: \nIn this simple model, I neglected the Earth’s rotation, intrinsic rotations of the capsule, active flight angle changes, supersonic effects on the friction force and more. The explicit form of the differential equations in coordinate components is the following. The equations that Katherine Johnson solved would have been quite similar to these: \nSupplemented by the initial position and velocity, it is straightforward to solve this system of equations numerically. Today, this is just a simple call to NDSolve . I don’t have to worry about the method to use, step size control, error control and more because the Wolfram Language automatically chooses values that guarantee meaningful results: \nHere is a plot of the height, speed and acceleration as a function of time: \nPlotting as a function of height instead of time shows that the exponential increase of air density is responsible for the high deceleration. This is not due to the parachute, which happens at a relatively low altitude. The peak deceleration happens at a very high altitude as the capsule goes from a vacuum to an atmospheric environment very quickly: \nAnd here is a plot of the vertical and tangential speed of the capsule in the reentry process: \nNow I repeat the numerical solution with a fixed-step Euler method: \nQualitatively, the solution looks the same as the previous one: \nFor the used step size of the time integration, the accumulated error is on the order of a few percent. Smaller step sizes would reduce the error (see the previous Wolfram|Alpha output): \nNote that the landing time predicted by the Euler method deviates only 0.11% from the previous time. (For comparison, if I were to solve the equation with two modern methods, say \"BDF\" vs. \"Adams\" , the error would be smaller by a few orders of magnitude.) \nNow, the reentry process generates a lot of heat. This is where the heat shield is needed. At which height is the most heat per area q generated? Without a detailed derivation, I can, from purely dimensional grounds, conjecture : \nMany more interesting things could be calculated ( Hicks 2009 ), but just like the movie had to fit everything into two hours and seven minutes, I will now end my blog for the sake of time. I hope I can be pardoned for the statement that, with the Wolfram Language, the sky’s the limit. \nTo download this post as a Computable Document Format (CDF) file, click here . New to CDF ? Get your copy for free with this one-time download .", "external_links": [], "published": "2017-02-25T01:08:00.000+02:00", "crawled": "2017-02-26T16:40:07.082+02:00", "highlightTitle": ""}