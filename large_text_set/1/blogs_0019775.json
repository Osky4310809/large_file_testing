{"organizations": [], "uuid": "4eaf2c08eef6ba2732839555547587f1a356f02f", "thread": {"social": {"gplus": {"shares": 11}, "pinterest": {"shares": 0}, "vk": {"shares": 1}, "linkedin": {"shares": 166}, "facebook": {"likes": 275, "shares": 275, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "blogs.msdn.microsoft.com", "main_image": "", "site_section": "https://social.msdn.microsoft.com/search/en-US/feed?query=blogs&refinement=109", "section_title": "Search Msdn", "url": "https://blogs.msdn.microsoft.com/dotnet/2016/05/16/announcing-net-core-rc2/", "country": "US", "title": ".NET Core RC2 - blogs.msdn.microsoft.com", "performance_score": 2, "site": "microsoft.com", "participants_count": 0, "title_full": ".NET Core RC2 - blogs.msdn.microsoft.com", "spam_score": 0.0, "site_type": "blogs", "published": "2017-01-24T05:54:00.000+02:00", "replies_count": 0, "uuid": "4eaf2c08eef6ba2732839555547587f1a356f02f"}, "author": "", "url": "https://blogs.msdn.microsoft.com/dotnet/2016/05/16/announcing-net-core-rc2/", "ord_in_thread": 0, "title": ".NET Core RC2 - blogs.msdn.microsoft.com", "locations": [], "entities": {"persons": [{"name": "ubuntu", "sentiment": "none"}], "locations": [{"name": "ubuntu", "sentiment": "none"}], "organizations": [{"name": "rtm", "sentiment": "none"}, {"name": "microsoft", "sentiment": "none"}, {"name": "redhat enterprise linux", "sentiment": "none"}, {"name": "dnx", "sentiment": "none"}, {"name": "sdk", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "A first-hand look from the .NET engineering teams Announcing .NET Core RC2 and .NET Core SDK Preview 1 ★ ★ ★ ★ ★ 0 \nToday, we are announcing the release of .NET Core RC2. You can use it to build ASP.NET Core , console apps and class libraries for Windows, OS X and Linux. RC2 is a major update from the November RC1 release , including new APIs, performance and reliability improvements and a new set of tools. \nYou can install .NET Core SDK 1.0 Preview 1 now (including .NET Core RC2), on Windows, OS X and Linux. You can also use it with Docker . \nYou can use .NET Core RC2 with a variety of editors and IDEs: Eventually, in your favorite Omnisharp-enabled editor \nComing soon: Deploy .NET Core RC2 apps to Azure Websites Acquire .NET Core RC2 with RedHat Enterprise Linux yum installer \nWe’ve been working directly with a number of customers who are hosting RC1 in production today, on Windows and Linux. Thanks for using RC1! Some of those customers have already moved to RC2, also in production. We appreciate all the feedback we’ve received since we released RC1. Please continue that feedback with the RC2 release. Releases .NET Core RC2 SDK Preview 1 \nWe made major changes to the .NET Core SDK, formerly called DNX, since RC1. These changes were fairly significant, and we plan to make additional changes before the final release of the SDK. As a result, we opted to call the SDK a preview release. While that may sound like a concern, the SDK is typically only used and development time, not in production, and so changes to the SDK should not affect running applications. \n.NET Core and ASP.NET Core have improved significantly since RC1. We’ve added features and improved performance and reliability. RC1 was “Go Live” and so is RC2. “Go Live” means you can call Microsoft Support for help with issues. \nNote that the .NET Core SDK includes a new telemetry feature. See the end of the post for more information on .NET Core Tools data collection. Platform Support \nWe’ve been adding support for a growing number of operating systems. We started out the project with a plan to support .NET Core on Windows, OS X and Linux. Close watchers of the coreclr and corefx projects will have noticed that the platform support has been growing steadily. .NET Core RC2 is supported on the following platforms. Red Hat Enterprise Linux 7.2 Centos 7.1 Ubuntu 14.04 (16.04 support is coming at RTM) Linux Mint 17+ Windows 7+ / Windows Server 2012 R2+ Windows Nano Server TP5 \n.NET Core RC2 will soon be showing up in the Red Hat Enterprise Linux software collection. You will be able to install it with yum, following instructions which will soon be posted to the redhatloves.net site. \nUbuntu was the first distro that we supported. We heard feedback that it made more sense to start with Debian, given that it is the parent of Ubuntu and many more distros. More recently, we added support for Debian, enabling .NET Core to be used in a larger set of Debian-based distros. \nWe intend .NET Core to be an open and flexible development platform. We’ll publish instructions in the next couple weeks on how to test .NET Core on arbitrary distros. You can see how Linux Mint is supported in runtimes.json , for example. .NET Core Tools \nYou typically start .NET Core development by installing the .NET Core SDK. The SDK includes enough software to build an app. The SDK gives you both the .NET Core Tools and a copy of .NET Core. As new versions of .NET Core are made available, you can download and install them without needing to get a new version of the tools. \nApps specify their dependence on a particular .NET Core version via the project.json project file. The tools help you acquire and use that .NET Core version. You can switch between multiple apps on your machine in Visual Studio, Visual Studio Code or at a command prompt and the .NET Core tools will always pick the right version of .NET Core to use within the context of each app. \nYou can also have multiple versions of the .NET Core tools on your machine, too, which can be important for continuous integration and other scenarios. Most of the time, you will just have one copy of the tools, since doing so provides a simpler experience. The dotnet Tool \nYour .NET Core experience will start with the dotnet tool. It exposes a set of commands for common operations, including restoring packages, building your project and unit testing. It also includes a command to create an empty new project to make it easy to get started. \nThere are many tools that come with the .NET Core Tools. You won’t see most of them since they all expose themselves through the dotnet tool. dotnet has a very simple extensibility model , so it’s also easy to add more commands as needed. \nThe following list provides a partial list of the commands . dotnet new – Initializes a sample console C# project. dotnet restore – Restores the dependencies for a given application. dotnet build – Builds a .NET Core application. dotnet publish – Publishes a .NET portable or self-contained application. dotnet run – Runs the application from source. dotnet test – Runs tests using a test runner specified in the project.json. dotnet pack – Creates a NuGet package of your code. \ndotnet new also supports F#. You can type dotnet new --lang F# to create a new F# app. The .NET Core Tools will download F# tools as part of dotnet restore . VB is not yet supported. Development Workflow \nThe .NET Core tools enable multiple workflows. \nThe simplest one is the following, which uses the tools to create a new project, restore its package dependencies, and then build and run the app. dotnet new dotnet restore dotnet run \nYou can separate the run command into two steps. In the example below, the app is called “test-app”, hence the dll name. dotnet build dotnet bin/Debug/netcoreapp1.0/test-app.dll \nThe tools also enable producing NuGet packages, Unit testing and other scenarios. You can learn more in the .NET Core docs . \nFor Unit testing with xUnit, see the Getting started with xUnit (.NET Core / ASP.NET Core) page. Comparison to DNX \nWe learned a lot from our experience building DNX , with RC1 and prior .NET Core releases. DNX was actually three things at once: a set of tools a set of framework libraries a set of services available to apps \nThe tools part of DNX lines up best with the .NET Core Tools that are part of today’s release. \nDNX was great if you wanted all three of those things, but could be a problem if you only wanted one or two of them. This problem became obvious to us as we experimented with the corert native compilation project, which required a different set of tools than DNX provided. DNX also relied on environment variables to set an “in use” version. That made it hard to use multiple .NET Core apps from the same command prompt. \nThose challenges provided us with a set of issues to resolve as we started our .NET Core RC2 project. They were the impetus to building the .NET Core RC2 tools. \nThe dotnet tool replaces the dnx and dnu tools that came with RC1. The dnvm tool doesn’t have a replacement yet. That’s something that might come in a later release. .NET Core App Types \nWe’ve talked to many customers about how they want to deploy apps. We heard two main models: Deploy smaller apps that have a dependency on a centrally installed .NET Core version, perhaps used by multiple apps. We call this model “portable”. Deploy larger self-contained apps that have no .NET Core dependencies. We call this model “self-contained”. \nBoth of these app deployment models are supported and are a good choice, depending on the scenario. As of RC2, we have focussed most on the first scenario. We will continue to improve both scenarios. Portable Apps \nPortable applications are the default application type in .NET Core. They require .NET Core to be installed on the targeted machine in order for them to run. This means that your application is portable between installations of .NET Core, including on multiple OSes. \nThis type of application will only carry its own code and dependencies that are outside of .NET Core libraries. As long as .NET Core is installed on a given machine, the app will typically work. You do not need to decide upfront which OSes your app will run on. Self-contained Apps \nSelf-contained applications contain all of their app dependencies, including the .NET Core runtime, as part of the application. This makes the app larger, but also makes it capable of running on any .NET Core supported platforms with the correct native dependencies, whether it has .NET Core installed or not. This makes it that much easier to deploy to the target machine, since you only deploy your application. \nSince the application carries the runtime, you need to make an explicit choice which platforms your application needs to run on. For instance, if you publish a self-contained application for Windows 10, that same application will not work on OS X or Linux and vice versa. Of course, you can add or remove platforms during development at any given time. Framework APIs \nWe added over a 1000 new APIs in .NET Core RC2 . You can see the release notes and the complete API diff for .NET Core RC2 relative to RC1. \nWe added APIs to the following existing namespaces and classes: \nNew .NET Core APIs", "external_links": [], "published": "2017-01-24T05:54:00.000+02:00", "crawled": "2017-01-24T00:58:45.330+02:00", "highlightTitle": ""}