{"organizations": [], "uuid": "e652b551f9d47242241b759c84355d5fd1bcbb6c", "thread": {"social": {"gplus": {"shares": 464}, "pinterest": {"shares": 0}, "vk": {"shares": 5}, "linkedin": {"shares": 259}, "facebook": {"likes": 784, "shares": 784, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "www.jetbrains.com", "main_image": "http://resources.jetbrains.com/assets/media/open-graph/intellij-idea_250x250.png", "site_section": "https://www.jetbrains.com/rss.xml", "section_title": "JetBrains News", "url": "https://www.jetbrains.com/idea/whatsnew/", "country": "US", "domain_rank": 2122, "title": "IntelliJ IDEA 2017.1 is Here: Java 9, Kotlin 1.1, Spring, Gradle, JavaScript and more", "performance_score": 7, "site": "jetbrains.com", "participants_count": 0, "title_full": "IntelliJ IDEA 2017.1 is Here: Java 9, Kotlin 1.1, Spring, Gradle, JavaScript and more", "spam_score": 0.0, "site_type": "blogs", "published": "2017-03-21T22:00:00.000+02:00", "replies_count": 0, "uuid": "e652b551f9d47242241b759c84355d5fd1bcbb6c"}, "author": "", "url": "https://www.jetbrains.com/idea/whatsnew/", "ord_in_thread": 0, "title": "IntelliJ IDEA 2017.1 is Here: Java 9, Kotlin 1.1, Spring, Gradle, JavaScript and more", "locations": [], "entities": {"persons": [{"name": "dvorak", "sentiment": "none"}, {"name": "logback", "sentiment": "none"}], "locations": [{"name": "san francisco", "sentiment": "none"}, {"name": "gradle", "sentiment": "none"}, {"name": "kotlin  the kotlin", "sentiment": "none"}, {"name": "kotlin", "sentiment": "none"}], "organizations": [{"name": "docker for mac", "sentiment": "none"}, {"name": "psi", "sentiment": "none"}, {"name": "unicode", "sentiment": "none"}, {"name": "jsp", "sentiment": "none"}, {"name": "ide", "sentiment": "none"}, {"name": "javascript standard style", "sentiment": "none"}, {"name": "jvm", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "Java Java 9 \nThe update brings support for the upcoming Java 9 and its new module system. The IDE supports the latest versions of JDK, helps import projects, and offers coding assistance when editing module declarations. \nA built-in inspection validates module declarations and provides a quick-fix to adjust the project dependencies accordingly when necessary. \nlearn more Java 8 \nThe quick-fixes introduced earlier, which help migrate for loops to Stream API calls, have been improved and now support more complicated cases. We’ve also introduced a quick-fix that can migrate Stream API calls back into for loops. \nWhen possible, the IDE suggests replacing Map.put statements and updating a value associated with a given key with a call of Map.merge . \nAlso, the IDE suggests replacing certain Map operations with Map.getOrDefault . JUnit 5 inspections \nAll JUnit 4 inspections are now available for JUnit 5. Regexp syntax highlighting \nDedicated section in Settings → Editor → Colors & Fonts for RegExp syntax highlighting. JVM debugger Async stacktraces \nThe new feature called Capture alters the stacktrace by substituting its parts related to asynchronous code execution with the corresponding parts of the stacktrace captured from where the asynchronous code is passed. Stepping into async code \nThe Smart Step Into action now also supports asynchronous code and steps into lambda expressions executed on other threads. Drag a breakpoint to remove it \nWe’ve added a new option called Drag a breakpoint to the editor area to remove it (available in Settings → Build, Execution, Deployment → Debugger , disabled by default). If you enable the option, a click on a breakpoint, instead of removing it, will enable/disable it. This option may saves you from accidentally removing a breakpoint and losing its parameters such as a condition. Memory view in Debug \nThe JVM Debugger Memory View , introduced with IntelliJ IDEA 2016.3 as a separate plugin is bundled and available inside the Debug tool window. Version control More display and search options in Log \nNow you can choose whether you want to use regular expressions and case sensitivity when searching over commit messages. \nAlso, you can choose how much information about branches and tags the Log viewer displays. Ignore imports and formatting in Diff \nThe Diff dialog got a new option called Ignore imports and formatting . As its name says, it ignores changes within import statements and whitespaces (at the same time it respects whitespaces within String literals) File history: performance and branches \nThe File History feature for Git has become faster. Besides better performance, it now can display the revisions graph, and even has a button to include changes from branches other than the current. Branches popup: favorites and speed search \nNow you can mark any branch as a favorite, for easier access. \nThe new popup also provides better search User interface Find in Path \nThe Find in Path dialog, which had received a Preview tab earlier, has been reworked from the ground up and now shows instant results in the first place Emoji in Editor \nThe editor now supports Unicode emoji characters (which are sometimes used in comments and String literals). On Mac OS X, emoji characters are rendered as colored images, while on Windows and Linux, emoji are rendered as monochrome characters Spring Spring Data \nSupport for Spring Data has been also updated following the changes introduced with Spring Data 2.0. The improvements include support for many new annotations and types (reactive types), new inspections, code completion, navigation, and other coding assistance features. \nThe Spring tool window now has a new tab called “Data” to help you quickly navigate through the repositories defined in your project. \nlearn more Spring Testing \nSupport for Spring Testing has been updated based on the changes introduced with Spring Boot 1.4.3 and the upcoming Spring 5.0 (test runners and inspections). Spring MVC \nSupport for Spring MVC has been updated with coding assistance for path attribute in JSP form tags. Kotlin \nThe Kotlin plugin bundled with the IDE has been updated to Kotlin 1.1 , which enables the use of the language in many new scenarios. JavaScript support \nJavaScript target is no longer experimental, and supports all Kotlin language features, a large part of the standard library, as well as JavaScript interoperability. This allows you to migrate the browser frontend of your applications to Kotlin, while continuing to use modern JavaScript development frameworks such as React. Coroutines \nAs a lightweight alternative to threads, coroutines enable much more scalable application backends, supporting massive workloads on a single JVM instance. In addition to that, coroutines are a very expressive tool for implementing asynchronous behavior, which is important for building responsive user interfaces on all platforms. Gradle Groovy Composite Builds \nSupport for Composite Builds , introduced earlier, has been greatly improved. Now the IDE automatically detects “includeBuild” in Gradle settings and configures the project accordingly. No manual configuration is required \nlearn more Logback and Parameter Hints \nThis update brings coding assistance for editing Logback appender configurations. It includes code completion, finding usages, navigation and renaming. \nThe Parameter Hints option, which was added for Java in IntelliJ IDEA 2016.3, is now available for Groovy as well. JavaScript Vue.js \nWe've published a plugin that adds first-class support for Vue.js . The IDE not only understands the template, script and style blocks with various lang attributes in the .vue files, but also provides completion for Vue directives and component names. Auto import for React components \nSelect a component defined in your application in the completion popup – and the IDE will add an import for it automatically. Forgot to import React? IntelliJ IDEA will provide a quick-fix. New ES6 quick-fixes \nThe IDE now helps you convert for..in loops on arrays to for..of statements introduced in ECMAScript 6. All you have to do is press Alt+Enter on the loop and select this conversion option. Another new intention can convert iterations with forEach to for..of . Sorting imports by module \nThe Optimize imports action can now automatically sort JavaScript and TypeScript imports alphabetically by module and reorder the imported members. You can configure this behavior in the Code Style settings. Angular language service \nTo help you work with Angular even more, the IDE adds support for the Angular language service , developed by the Angular team to improve code analysis and completion for Angular-TypeScript projects. \nRun npm install @angular/language-service --save-dev to enable that in your project. Improved TSLint support \nIntegration with TSLint adds support for TSLint-powered quick-fixes. You can also import some of the code style rules defined in tslint.json to the IDE code style settings – just reply ‘Yes’ when prompted about this in the tslint.json file. Better testing experience \nRunning Mocha and Jest tests is even easier now with the new Run icon on the gutter. Click the icon next to the test or the suit name and select Run or Debug . \nThe test status will be displayed next to the test name for all supported test frameworks. Completion in package.json \nAdding new project dependencies to package.json became easier: the IDE now provides code completion for package names. \nThe IDE also suggests the latest versions of the packages. Support for Standard code style \nThe Code Style settings now support JavaScript Standard Style . To use it, go to Settings → Editor → Code Style → JavaScript and click Set from Predefined Style – Standard . Module dependency diagram \nTo overview the application structure, you can now visualize the module dependencies that a file, group of files or folder has. Right-click on a file or directory in the Project view or in the editor, and then select Diagrams → Show diagram . New code style options \nThis update brings lots of new code style options for JavaScript and TypeScript . You can now configure the use of semicolons to terminate statements, trailing commas, quotes type, and wrappings for ternary operators and variable declarations with single var. Database tools Managing schemas \nThe Schemas tab comes back to the Data Sources and Drivers dialog. Now it’s a tree with the ability to choose the current schema. \nWe added the Pattern field where you can describe what you want to be introspected. The Ctrl+Q shortcut will give you information about the syntax. Importing tables \nThe IDE now allows you to import table schema and data from one database to another (even of a different type, e.g. from MySQL to Sql Server ). To import a table, simply drag it with mouse to the data source where you'd like it to copy. \nThe information about the progress is published on the Database tab of Event Log. SQL resolution scopes \nNow, you can map any SQL file (or entire folder) to any datasource in Settings → Tools → Database → SQL resolution scopes . If you do that, all unqualified objects from these locations will be resolved to the selected datasource (or database, or schema). Default search path \nBefore, we set the search path according to the context of the console opening. At some point we discovered it wasn’t very convenient for many of our users. Now the default search path is set for any console. You can change it in any moment or go back to the default one. Other \nThe update includes all the Android Studio changes from v2.2.1 and v2.2.2 : \nThe updated Docker plugin now supports Docker for Mac and works via unix:// . \nThe Windows installer now comes with a 64-bit JDK, which means that now you can give your IDE more RAM. \nBetter support for Dvorak and some other non-standard (e.g. German, French, Italian, etc.) keyboard layouts . \nGogland , the new Go IDE that we announced several months ago now also becomes IntelliJ IDEA Ultimate plugin , which ends JetBrains support for the existing third-party Go plugin. \nYou're welcome to try the new plugin and use this FAQ to see how exactly it differs from existing one. 2016.3 Nov 22 JVM debugger Class-level watches \nNow you can define watch expressions on the class level. These watches appear as extra fields of the class but are evaluated based on your expressions. An expression for class-level watches is defined in the context of the class. Primitive type renderers \nNow you can define custom Java Type Renderers for primitive types too, including arrays. Memory view \nWith the help of the new JVM Debugger Memory View plugin you can explore objects in the JVM heap during a debug session. \nWhen you’re stepping over the code, the Diff column shows you how the number of objects changes between debugger stops. A double click on a class name, opens a dialog with instances of the class. If needed, the plugin is also capable of tracking stacktraces for chosen classes. Detecting JRE \nAlso, the debugger got better at detecting JREs used by the running application. Now, if the application uses a JRE different from the project JDK and you’re stepping into the JDK sources, the IDE will try to use another JDK configured in the IDE that better matches the running JRE version. Version control Search speed has improved dramatically, particularly for the Text , Author and Path filters. Commit details have moved to the right, giving more space to the Log itself. Commit messages in the table are now aligned and thus more readable. Labels have been moved to the right side and are now displayed in a more elegant way. Resolving conflicts \nNow, the IDE is capable of resolving simple conflicts. When such a resolve is possible, the IDE shows a Resolve icon on the left side of the editor. Click the icon to have the conflict resolved by the IDE. To undo, press Ctrl+Z Syntax highlighting in the Diff and Merge dialogs \nWe've added full syntax highlighting for non-local revisions in the Diff and Merge dialogs. \nTo get it working, we’re building the PSI tree rather than relying on lexer tokens. As a nice side effect you get code navigation here as well. Line markers in the Merge dialog \nAlso, we’ve added line markers to the Merge dialog to indicate actual changes to the base revision. \nThis makes it easier to understand what changes are actually going to be applied. Undo commit \nNow you can undo your last change (that you haven't yet pushed) in one click via the Log 's context menu. Restore and Delete tracked branch actions \nNow, when you delete a local branch, you get a notification that lets you quickly undo it or delete the tracked remote branch too. Sign-off commit \nThe Commit Changes dialog allows you to sign-off your commit. This may be a requirement for getting patches into some projects (including the Linux kernel). Managing Git remotes \nWe’ve added a way to manage Git remotes: via VCS → Git → Configure Remotes . Now you can add, edit and remove remotes for every repo in the project. \nNote that adding a remote is also available in the Push dialog. User interface Parameter hints \nThe editor now shows parameter hints for literals and nulls used as method arguments. These hints make code much more readable. \nIf you find hints redundant for a certain method, you can tell the IDE not to show hints for this method. To disable hints completely, uncheck Settings → Editor → General → Appearance → Show parameter name hints . Semantic highlighting \nSemantic highlighting, previously introduced in KDevelop and some other IDEs, is now available in IntelliJ IDEA. It extends the standard syntax highlighting with unique colors for each parameter and local variable. \nTo enable this feature, check Settings → Editor → Colors & Fonts → Language Defaults → Semantic highlighting . Flat file icons \nIn this update we've reworked the file icons to achieve a flatter design. While the new icons may look unusual, hopefully they feel sharper and less noisy to you. \nLater, we may introduce flat icons to other parts of the IDE as well. Recent tests \nNow you can press Shift+Ctrl+; and get a popup with recent tests. The popup shows successful test configurations and failed individual tests. Press Enter to re-run the selected test or F4 to navigate to its declaration. Resource bundle editor \nThe Resource Bundle editor now shows you which properties are unused in the project. Find in path settings \nPreviously, the Find in Path dialog would reset some of its settings if you called it from the Editor . This behavior didn't seem convenient so we've changed it. Now the dialog always preserves previous settings independently of where you call it from. Fira Code font \nAnother font-related change, now affecting all platforms, is Fira Code which is now bundled with the IDE and allows everyone to use Font Ligatures . SF font for macOS \nmacOS users will notice that the default font of the UI ( Settings → Appearance & Behavior → Appearance → UI Options ) has changed to San Francisco (in particular SF NS Text), now the standard for the macOS platform. Java \nNow, if you press Alt+Enter inside a non-trivial for-loop, the IDE will prompt you to replace it with a chain of stream API calls. It supports count , flatMap , map , mapToInt , collect , filter , anyMatch , and other Stream methods. learn more \nAlso, when appropriate, the IDE will prompt you to replace certain code with Map.computeIfAbsent , Collections.removeIf or ThreadLocal.withInitial . learn more Reporting nullability issues \nNow, if you have a method with a @NotNull , Objects.requireNonNull or Guava’s Preconditions.checkNotNull contract and the IDE notices that this contract is broken somewhere in the project, it will notify you immediately about that next to your parameter definition. \nThe corresponding inspection also allows you to navigate to those usages breaking your contract–so you can fix that. Inlining local variables used only by return statements \nThe new inspection finds local variables used only by return statements, and provides a quick fix that inlines these variables–by replacing their assignments with return statements. \nWhen the returned value can’t be inlined into a return statement, the quick fix attempts to move the return statement as close to the computation of the returned value as possible. learn more Runtime assertions for not-null-annotated code \nIntelliJ IDEA’s compiler ( Settings → Build, Execution, Deployment → Compiler ) has an option to generate runtime assertions for methods and parameters annotated with org.jetbrains.annotations.NotNull . \nStarting now it supports non-JetBrains annotations as well, in particular JSR-305 . learn more Some intentions became quick-fixes \nUnlike intention actions, inspection quick-fixes can be applied to many files at once. We've chosen several intentions that may work better as quick-fixes and converted them: Lambda can be replaced with anonymous class and Diamond can be replaced with explicit type arguments to name a few. Lambdas in Structure view", "external_links": [], "published": "2017-03-21T22:00:00.000+02:00", "crawled": "2017-03-21T15:46:12.510+02:00", "highlightTitle": ""}