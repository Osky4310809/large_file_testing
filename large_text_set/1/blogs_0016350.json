{"organizations": [], "uuid": "0b6b86719b359bc549e1ce7778f38da02cc9feee", "thread": {"social": {"gplus": {"shares": 0}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 3}, "facebook": {"likes": 176, "shares": 176, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "blogs.msdn.microsoft.com", "main_image": "https://msdnshared.blob.core.windows.net/media/2017/01/pixscreenshot.png", "site_section": "http://blogs.msdn.com//b/MainFeed.aspx?Type=BlogsOnly", "section_title": "MSDN Blogs", "url": "https://blogs.msdn.microsoft.com/pix/2017/01/17/introducing-pix-on-windows-beta/", "country": "US", "title": "Introducing PIX on Windows (beta)", "performance_score": 1, "site": "microsoft.com", "participants_count": 1, "title_full": "Introducing PIX on Windows (beta)", "spam_score": 0.0, "site_type": "blogs", "published": "2017-01-18T06:07:00.000+02:00", "replies_count": 0, "uuid": "0b6b86719b359bc549e1ce7778f38da02cc9feee"}, "author": "Shawn Hargreaves - MSFT", "url": "https://blogs.msdn.microsoft.com/pix/2017/01/17/introducing-pix-on-windows-beta/", "ord_in_thread": 0, "title": "Introducing PIX on Windows (beta)", "locations": [], "entities": {"persons": [], "locations": [], "organizations": [{"name": "nvidia", "sentiment": "none"}, {"name": "dll", "sentiment": "none"}, {"name": "intel", "sentiment": "none"}, {"name": "gpu", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "0 \nWelcome to our new PIX team blog! \nPIX is a performance tuning and debugging tool for game developers. It has a long and storied history spanning three generations of Xbox console. Today we are pleased to announce that a beta release of PIX is now available for analyzing DirectX 12 games on Windows as well. \nPIX on Windows provides five main modes of operation: GPU captures for debugging and analyzing the performance of Direct3D 12 graphics rendering. Timing captures for understanding the performance and threading of all CPU and GPU work carried out by your game. Function Summary captures accumulate information about how long each function runs for and how often each is called. Callgraph captures trace the execution of a single function. Memory Allocation captures provide insight into the memory allocations made by your game. \nFor best results we recommend running PIX on: Windows 10 build 14393 ( Anniversary Update , aka RS1) with latest updates 32 GB RAM A Direct3D 12 GPU with the latest available graphics drivers. PIX will not work correctly with older drivers! Intel driver >= 15.45.10.4542 NVIDIA 970 or better with driver >= 21.21.13.7290 . Note that NVIDIA’s support for GPU shader instruction disassembly requires a DLL. Please use this link to get the DLL. \nSee the requirements page for more information. \nThis is a beta release, which means bugs are probable and there are plenty of features we want to add but haven’t yet gotten around to . If you encounter a problem, or have a suggestion for how PIX could be improved, we’d love to hear from you . And stay tuned for GPU hardware counters, which will provide richer low level performance information when enabled via per-GPU plugins. The first of these is coming Real Soon Now … \nTo learn how to use PIX, check out the documentation and video channel . Last but not least, download the PIX beta here . \n\nNotes: PIX only supports capturing D3D12 content, not D3D11 or 11on12. PIX only supports 64 bit apps (both UWP and Win32). PIX does not support x86 apps. PIX only captures data from the specific process that it launched or attached to. It does not support child processes. If your title uses multiple processes, you will need to bypass any client/launcher processes and have PIX launch/attach the main game executable. Counter values other than timing in the event list are not currently rolled up to their parent bundle or marker region. GPU captures are not generally portable between different GPUs or even different drivers on the same GPU. PIX will warn if you attempt to run analysis on a capture whose capture device differs from the current playback device. You can continue past this warning, but be aware there may be compatibility issues that cause it to fail. GPU captures do not currently overlap GPU work on different queues. If your app uses asynchronous compute to execute rendering and compute work simultaneously, it will show up in the PIX timeline as being executed in a non-parallel fashion. PIX does not support multi-gpu enabled apps. You can use PIX on a machine with multiple GPUs, but PIX will always capture/playback on the primary adapter.", "external_links": [], "published": "2017-01-18T06:07:00.000+02:00", "crawled": "2017-01-18T02:17:23.774+02:00", "highlightTitle": ""}